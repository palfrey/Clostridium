{:rename-macros {}, :renames {}, :externs {Decimal {noConflict {}}, Object {set {}, toExpPos {}, rounding {}, hypot {apply {}}, maxE {}, sign {}, log10 {}, precision {}, minE {}, log2 {}, prototype {decimal$core$IDecimal$ {}, decimal$core$IDecimal$-decimal$arity$1 {}}, clone {}, toExpNeg {}, random {}, crypto {}, modulo {}}, Error {}, undefined {}}, :use-macros {}, :excludes #{= < pos? neg? <= * min > mod - zero? / >= integer? + max}, :name decimal.core, :imports nil, :requires {decimal.extern.decimaljs decimal.extern.decimaljs}, :cljs.spec/speced-vars [], :uses nil, :defs {decimal? {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/decimal/core.cljs", :line 136, :column 16, :end-line 136, :end-column 24, :tag boolean, :arglists (quote ([v])), :doc "Return true if `v` is a instance of Decimal."}, :name decimal.core/decimal?, :variadic false, :file "resources/public/js/out/decimal/core.cljs", :end-column 24, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 136, :ret-tag boolean, :end-line 136, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([v])), :doc "Return true if `v` is a instance of Decimal."}, +decimal+ {:name decimal.core/+decimal+, :file "resources/public/js/out/decimal/core.cljs", :line 9, :column 1, :end-line 9, :end-column 24, :static true, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/decimal/core.cljs", :line 9, :column 15, :end-line 9, :end-column 24, :static true}, :tag js}, finite? {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/decimal/core.cljs", :line 141, :column 16, :end-line 141, :end-column 23, :tag boolean, :arglists (quote ([v])), :doc "Returns true if the value of this Decimal is a finite\n  number, otherwise returns false.\n  The only possible non-finite values of a Decimal are\n  NaN, Infinity and -Infinity."}, :name decimal.core/finite?, :variadic false, :file "resources/public/js/out/decimal/core.cljs", :end-column 23, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 141, :ret-tag boolean, :end-line 141, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([v])), :doc "Returns true if the value of this Decimal is a finite\n  number, otherwise returns false.\n  The only possible non-finite values of a Decimal are\n  NaN, Infinity and -Infinity."}, IDecimal {:meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/decimal/core.cljs", :line 124, :column 14, :end-line 124, :end-column 22, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-decimal [[v]]}}}, :protocol-symbol true, :name decimal.core/IDecimal, :file "resources/public/js/out/decimal/core.cljs", :end-column 22, :column 1, :line 124, :protocol-info {:methods {-decimal [[v]]}}, :info nil, :end-line 124, :tag any, :impls #{decimal.core/*decimal* number string}, :doc nil, :jsdoc ("@interface")}, = {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/decimal/core.cljs", :line 227, :column 16, :end-line 227, :end-column 17, :tag boolean, :arglists (quote ([v x] [v x & more])), :doc "Returns true if the value of this Decimal is equal to the\n  value of x, otherwise returns false.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([v x]), :arglists ([v x] [v x & more]), :arglists-meta (nil nil)}}, :name decimal.core/=, :variadic true, :file "resources/public/js/out/decimal/core.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([v x]), :arglists ([v x] [v x & more]), :arglists-meta (nil nil)}, :method-params ([v x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 227, :ret-tag boolean, :end-line 227, :max-fixed-arity 2, :tag boolean, :fn-var true, :arglists ([v x] [v x & more]), :doc "Returns true if the value of this Decimal is equal to the\n  value of x, otherwise returns false."}, asinh {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/decimal/core.cljs", :line 356, :column 7, :end-line 356, :end-column 12, :arglists (quote ([v])), :doc "Returns a new Decimal whose value is the inverse hyperbolic\n  sine in radians of the value of this Decimal."}, :name decimal.core/asinh, :variadic false, :file "resources/public/js/out/decimal/core.cljs", :end-column 12, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 356, :end-line 356, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :doc "Returns a new Decimal whose value is the inverse hyperbolic\n  sine in radians of the value of this Decimal."}, log {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/decimal/core.cljs", :line 420, :column 7, :end-line 420, :end-column 10, :arglists (quote ([v] [v x])), :doc "Returns a new Decimal whose value is the base `x` logarithm\n  of the value of this Decimal.\n  If x is omitted, the base 10 logarithm of the value of\n  this Decimal will be returned.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([v] [v x]), :arglists ([v] [v x]), :arglists-meta (nil nil)}}, :name decimal.core/log, :variadic false, :file "resources/public/js/out/decimal/core.cljs", :end-column 10, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([v] [v x]), :arglists ([v] [v x]), :arglists-meta (nil nil)}, :method-params ([v] [v x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 420, :end-line 420, :max-fixed-arity 2, :fn-var true, :arglists ([v] [v x]), :doc "Returns a new Decimal whose value is the base `x` logarithm\n  of the value of this Decimal.\n  If x is omitted, the base 10 logarithm of the value of\n  this Decimal will be returned."}, acos {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/decimal/core.cljs", :line 368, :column 7, :end-line 368, :end-column 11, :arglists (quote ([v])), :doc "Returns a new Decimal whose value is the inverse cosine\n  in radians of the value of this Decimal."}, :name decimal.core/acos, :variadic false, :file "resources/public/js/out/decimal/core.cljs", :end-column 11, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 368, :end-line 368, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :doc "Returns a new Decimal whose value is the inverse cosine\n  in radians of the value of this Decimal."}, to-nearest {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/decimal/core.cljs", :line 723, :column 7, :end-line 723, :end-column 17, :arglists (quote ([v n] [v n rm])), :doc "Returns a new Decimal whose value is the nearest multiple of `x` to the value\n  of this Decimal.\n\n  If the value of this Decimal is equidistant from two multiples of `x`, the\n  rounding mode `rm`, or `rounding` if `rm` is omitted, determines the\n  direction of the nearest.\n\n  In this context, rounding mode `:round-half-up` is interpreted the same as\n  rounding mode `:round-up`, and so on, i.e. the rounding is either up, down,\n  to ceil, to floor or to even.\n\n  The return value will always have the same sign as this Decimal, unless\n  either this Decimal or `x` is `NaN`, in which case the return value will be\n  also be `NaN`.\n\n  The return value is not affected by the value of the `precision` setting.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([v n] [v n rm]), :arglists ([v n] [v n rm]), :arglists-meta (nil nil)}}, :name decimal.core/to-nearest, :variadic false, :file "resources/public/js/out/decimal/core.cljs", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([v n] [v n rm]), :arglists ([v n] [v n rm]), :arglists-meta (nil nil)}, :method-params ([v n] [v n rm]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 723, :end-line 723, :max-fixed-arity 3, :fn-var true, :arglists ([v n] [v n rm]), :doc "Returns a new Decimal whose value is the nearest multiple of `x` to the value\n  of this Decimal.\n\n  If the value of this Decimal is equidistant from two multiples of `x`, the\n  rounding mode `rm`, or `rounding` if `rm` is omitted, determines the\n  direction of the nearest.\n\n  In this context, rounding mode `:round-half-up` is interpreted the same as\n  rounding mode `:round-up`, and so on, i.e. the rounding is either up, down,\n  to ceil, to floor or to even.\n\n  The return value will always have the same sign as this Decimal, unless\n  either this Decimal or `x` is `NaN`, in which case the return value will be\n  also be `NaN`.\n\n  The return value is not affected by the value of the `precision` setting."}, < {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/decimal/core.cljs", :line 179, :column 16, :end-line 179, :end-column 17, :tag boolean, :arglists (quote ([v x] [v x & more])), :doc "Returns true if the value of this Decimal is less than\n  the value of x, otherwise returns false.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([v x]), :arglists ([v x] [v x & more]), :arglists-meta (nil nil)}}, :name decimal.core/<, :variadic true, :file "resources/public/js/out/decimal/core.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([v x]), :arglists ([v x] [v x & more]), :arglists-meta (nil nil)}, :method-params ([v x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 179, :ret-tag boolean, :end-line 179, :max-fixed-arity 2, :tag boolean, :fn-var true, :arglists ([v x] [v x & more]), :doc "Returns true if the value of this Decimal is less than\n  the value of x, otherwise returns false."}, floor {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/decimal/core.cljs", :line 313, :column 7, :end-line 313, :end-column 12, :arglists (quote ([v])), :doc "Returns a new Decimal whose value is the value of this Decimal\n  rounded to a whole number in the direction of negative Infinity."}, :name decimal.core/floor, :variadic false, :file "resources/public/js/out/decimal/core.cljs", :end-column 12, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 313, :end-line 313, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :doc "Returns a new Decimal whose value is the value of this Decimal\n  rounded to a whole number in the direction of negative Infinity."}, NaN? {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/decimal/core.cljs", :line 155, :column 16, :end-line 155, :end-column 20, :tag boolean, :arglists (quote ([v])), :doc "Returns true if the value of this Decimal is NaN,\n  otherwise returns false."}, :name decimal.core/NaN?, :variadic false, :file "resources/public/js/out/decimal/core.cljs", :end-column 20, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 155, :ret-tag boolean, :end-line 155, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([v])), :doc "Returns true if the value of this Decimal is NaN,\n  otherwise returns false."}, hypot {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/decimal/core.cljs", :line 473, :column 7, :end-line 473, :end-column 12, :arglists (quote ([& params])), :doc "Returns a new Decimal whose value is the square root of the sum\n  of the squares of the arguments.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(params)], :arglists ([& params]), :arglists-meta (nil)}}, :name decimal.core/hypot, :variadic true, :file "resources/public/js/out/decimal/core.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(params)], :arglists ([& params]), :arglists-meta (nil)}, :method-params [(params)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 473, :end-line 473, :max-fixed-arity 0, :fn-var true, :arglists ([& params]), :doc "Returns a new Decimal whose value is the square root of the sum\n  of the squares of the arguments."}, tanh {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/decimal/core.cljs", :line 398, :column 7, :end-line 398, :end-column 11, :arglists (quote ([v])), :doc "Returns a new Decimal whose value is the hyperbolic\n  tangent of the value in radians of this Decimal."}, :name decimal.core/tanh, :variadic false, :file "resources/public/js/out/decimal/core.cljs", :end-column 11, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 398, :end-line 398, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :doc "Returns a new Decimal whose value is the hyperbolic\n  tangent of the value in radians of this Decimal."}, -decimal {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/decimal/core.cljs", :line 125, :column 4, :end-line 125, :end-column 12, :protocol decimal.core/IDecimal, :doc "return a decimal instance.", :arglists (quote ([v]))}, :protocol decimal.core/IDecimal, :name decimal.core/-decimal, :variadic false, :file "resources/public/js/out/decimal/core.cljs", :end-column 12, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 124, :end-line 125, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :doc "return a decimal instance."}, pos? {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/decimal/core.cljs", :line 167, :column 16, :end-line 167, :end-column 20, :tag boolean, :arglists (quote ([v])), :doc "Returns true if the value of this Decimal is negative,\n  otherwise returns false."}, :name decimal.core/pos?, :variadic false, :file "resources/public/js/out/decimal/core.cljs", :end-column 20, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 167, :ret-tag boolean, :end-line 167, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([v])), :doc "Returns true if the value of this Decimal is negative,\n  otherwise returns false."}, neg {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/decimal/core.cljs", :line 479, :column 7, :end-line 479, :end-column 10, :arglists (quote ([v])), :doc "Returns a new Decimal whose value is the value of this Decimal negated."}, :name decimal.core/neg, :variadic false, :file "resources/public/js/out/decimal/core.cljs", :end-column 10, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 479, :end-line 479, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :doc "Returns a new Decimal whose value is the value of this Decimal negated."}, ceil {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/decimal/core.cljs", :line 319, :column 7, :end-line 319, :end-column 11, :arglists (quote ([v])), :doc "Returns a new Decimal whose value is the value of this Decimal\n  rounded to a whole number in the direction of positive Infinity."}, :name decimal.core/ceil, :variadic false, :file "resources/public/js/out/decimal/core.cljs", :end-column 11, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 319, :end-line 319, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :doc "Returns a new Decimal whose value is the value of this Decimal\n  rounded to a whole number in the direction of positive Infinity."}, neg? {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/decimal/core.cljs", :line 161, :column 16, :end-line 161, :end-column 20, :tag boolean, :arglists (quote ([v])), :doc "Returns true if the value of this Decimal is negative,\n  otherwise returns false."}, :name decimal.core/neg?, :variadic false, :file "resources/public/js/out/decimal/core.cljs", :end-column 20, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 161, :ret-tag boolean, :end-line 161, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([v])), :doc "Returns true if the value of this Decimal is negative,\n  otherwise returns false."}, to-binary {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/decimal/core.cljs", :line 529, :column 7, :end-line 529, :end-column 16, :arglists (quote ([v] [v sd] [v sd rm])), :doc "Returns a string representing the value of this Decimal in binary format.\n\n  If `sd` is specified, the return value will use binary exponential notation.\n  If `sd` is omitted, the return value will be rounded to default significant\n  digits. If `rm` is omitted, default rounding mode will be used.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([v] [v sd] [v sd rm]), :arglists ([v] [v sd] [v sd rm]), :arglists-meta (nil nil nil)}}, :name decimal.core/to-binary, :variadic false, :file "resources/public/js/out/decimal/core.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([v] [v sd] [v sd rm]), :arglists ([v] [v sd] [v sd rm]), :arglists-meta (nil nil nil)}, :method-params ([v] [v sd] [v sd rm]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 529, :end-line 529, :max-fixed-arity 3, :fn-var true, :arglists ([v] [v sd] [v sd rm]), :doc "Returns a string representing the value of this Decimal in binary format.\n\n  If `sd` is specified, the return value will use binary exponential notation.\n  If `sd` is omitted, the return value will be rounded to default significant\n  digits. If `rm` is omitted, default rounding mode will be used."}, <= {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/decimal/core.cljs", :line 191, :column 16, :end-line 191, :end-column 18, :tag boolean, :arglists (quote ([v x] [v x & more])), :doc "Returns true if the value of this Decimal is less than\n  or equal to the value of x, otherwise returns false.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([v x]), :arglists ([v x] [v x & more]), :arglists-meta (nil nil)}}, :name decimal.core/<=, :variadic true, :file "resources/public/js/out/decimal/core.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([v x]), :arglists ([v x] [v x & more]), :arglists-meta (nil nil)}, :method-params ([v x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 191, :ret-tag boolean, :end-line 191, :max-fixed-arity 2, :tag boolean, :fn-var true, :arglists ([v x] [v x & more]), :doc "Returns true if the value of this Decimal is less than\n  or equal to the value of x, otherwise returns false."}, * {:name decimal.core/*, :file "resources/public/js/out/decimal/core.cljs", :line 307, :column 1, :end-line 307, :end-column 7, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/decimal/core.cljs", :line 307, :column 6, :end-line 307, :end-column 7}}, min {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/decimal/core.cljs", :line 292, :column 7, :end-line 292, :end-column 10, :arglists (quote ([a] [a b] [a b & more])), :doc "Returns a new Decimal whose value is the minimum.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([a] [a b]), :arglists ([a] [a b] [a b & more]), :arglists-meta (nil nil nil)}}, :name decimal.core/min, :variadic true, :file "resources/public/js/out/decimal/core.cljs", :end-column 10, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([a] [a b]), :arglists ([a] [a b] [a b & more]), :arglists-meta (nil nil nil)}, :method-params ([a] [a b]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 292, :end-line 292, :max-fixed-arity 2, :fn-var true, :arglists ([a] [a b] [a b & more]), :doc "Returns a new Decimal whose value is the minimum."}, atan {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/decimal/core.cljs", :line 392, :column 7, :end-line 392, :end-column 11, :arglists (quote ([v])), :doc "Returns a new Decimal whose value is the inverse tangent\n  in radians of the value of this Decimal."}, :name decimal.core/atan, :variadic false, :file "resources/public/js/out/decimal/core.cljs", :end-column 11, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 392, :end-line 392, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :doc "Returns a new Decimal whose value is the inverse tangent\n  in radians of the value of this Decimal."}, *decimal* {:name decimal.core/*decimal*, :file "resources/public/js/out/decimal/core.cljs", :line 10, :column 1, :end-line 10, :end-column 25, :dynamic true, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/decimal/core.cljs", :line 10, :column 16, :end-line 10, :end-column 25, :dynamic true}, :tag js}, sign {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/decimal/core.cljs", :line 520, :column 7, :end-line 520, :end-column 11, :arglists (quote ([v])), :doc "Returns the sign of the value of this Decimal."}, :name decimal.core/sign, :variadic false, :file "resources/public/js/out/decimal/core.cljs", :end-column 11, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 520, :end-line 520, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :doc "Returns the sign of the value of this Decimal."}, to-hex {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/decimal/core.cljs", :line 608, :column 7, :end-line 608, :end-column 13, :arglists (quote ([v] [v sd] [v sd rm])), :doc "Returns a string representing the value of this Decimal in\n  hexadecimal notation rounded to `sd` significant digits\n  using rounding mode `rm`.\n\n  If `sd` is defined, the return value will use binary\n  exponential notation.\n\n  If `sd` is omitted, the return value will be rounded to\n  `precision` significant digits.\n\n  If `rm` is omitted, rounding mode `rounding` will be used.\n\n  Throws on an invalid `sd` or `rm` value.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([v] [v sd] [v sd rm]), :arglists ([v] [v sd] [v sd rm]), :arglists-meta (nil nil nil)}}, :name decimal.core/to-hex, :variadic false, :file "resources/public/js/out/decimal/core.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([v] [v sd] [v sd rm]), :arglists ([v] [v sd] [v sd rm]), :arglists-meta (nil nil nil)}, :method-params ([v] [v sd] [v sd rm]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 608, :end-line 608, :max-fixed-arity 3, :fn-var true, :arglists ([v] [v sd] [v sd rm]), :doc "Returns a string representing the value of this Decimal in\n  hexadecimal notation rounded to `sd` significant digits\n  using rounding mode `rm`.\n\n  If `sd` is defined, the return value will use binary\n  exponential notation.\n\n  If `sd` is omitted, the return value will be rounded to\n  `precision` significant digits.\n\n  If `rm` is omitted, rounding mode `rounding` will be used.\n\n  Throws on an invalid `sd` or `rm` value."}, cos {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/decimal/core.cljs", :line 362, :column 7, :end-line 362, :end-column 10, :arglists (quote ([v])), :doc "Returns a new Decimal whose value is the cosine of the value\n  in radians of this Decimal."}, :name decimal.core/cos, :variadic false, :file "resources/public/js/out/decimal/core.cljs", :end-column 10, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 362, :end-line 362, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :doc "Returns a new Decimal whose value is the cosine of the value\n  in radians of this Decimal."}, log10 {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/decimal/core.cljs", :line 435, :column 7, :end-line 435, :end-column 12, :arglists (quote ([x])), :doc "Returns a new Decimal whose value is the base 10 logarithm of `x`."}, :name decimal.core/log10, :variadic false, :file "resources/public/js/out/decimal/core.cljs", :end-column 12, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 435, :end-line 435, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Returns a new Decimal whose value is the base 10 logarithm of `x`."}, to-fixed {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/decimal/core.cljs", :line 562, :column 7, :end-line 562, :end-column 15, :arglists (quote ([v] [v dp] [v dp rm])), :doc "Returns a string representing the value of this Decimal in\n  normal (fixed-point) notation rounded to `dp` decimal places\n  using rounding mode `rm`.\n\n  If the value of this Decimal in normal notation has fewer\n  than `dp` fraction digits, the return value will be appended\n  with zeros accordingly.\n\n  Unlike `Number/toFixed`, which returns exponential notation\n  if a number is greater or equal to 10^21, this method will\n  always return normal notation.\n\n  If `dp` is omitted, the return value will be unrounded and\n  in normal notation. This is unlike `Number/toFixed`, which\n  returns the value to zero decimal places, but is useful when\n  because of the current `toExpNeg` or `toExpNeg` values,\n  toString returns exponential notation.\n\n  If `rm` is omitted, default rounding mode is used.\n\n  Throws on an invalid `dp` or `rm` value.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([v] [v dp] [v dp rm]), :arglists ([v] [v dp] [v dp rm]), :arglists-meta (nil nil nil)}}, :name decimal.core/to-fixed, :variadic false, :file "resources/public/js/out/decimal/core.cljs", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([v] [v dp] [v dp rm]), :arglists ([v] [v dp] [v dp rm]), :arglists-meta (nil nil nil)}, :method-params ([v] [v dp] [v dp rm]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 562, :end-line 562, :max-fixed-arity 3, :fn-var true, :arglists ([v] [v dp] [v dp rm]), :doc "Returns a string representing the value of this Decimal in\n  normal (fixed-point) notation rounded to `dp` decimal places\n  using rounding mode `rm`.\n\n  If the value of this Decimal in normal notation has fewer\n  than `dp` fraction digits, the return value will be appended\n  with zeros accordingly.\n\n  Unlike `Number/toFixed`, which returns exponential notation\n  if a number is greater or equal to 10^21, this method will\n  always return normal notation.\n\n  If `dp` is omitted, the return value will be unrounded and\n  in normal notation. This is unlike `Number/toFixed`, which\n  returns the value to zero decimal places, but is useful when\n  because of the current `toExpNeg` or `toExpNeg` values,\n  toString returns exponential notation.\n\n  If `rm` is omitted, default rounding mode is used.\n\n  Throws on an invalid `dp` or `rm` value."}, tan {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/decimal/core.cljs", :line 386, :column 7, :end-line 386, :end-column 10, :arglists (quote ([v])), :doc "Returns a new Decimal whose value is the tangent of the value\n  in radians of this Decimal."}, :name decimal.core/tan, :variadic false, :file "resources/public/js/out/decimal/core.cljs", :end-column 10, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 386, :end-line 386, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :doc "Returns a new Decimal whose value is the tangent of the value\n  in radians of this Decimal."}, cbrt {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/decimal/core.cljs", :line 410, :column 7, :end-line 410, :end-column 11, :arglists (quote ([v])), :doc "Returns a new Decimal whose value is the cube root of this Decimal."}, :name decimal.core/cbrt, :variadic false, :file "resources/public/js/out/decimal/core.cljs", :end-column 11, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 410, :end-line 410, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :doc "Returns a new Decimal whose value is the cube root of this Decimal."}, modulo-mapping {:name decimal.core/modulo-mapping, :file "resources/public/js/out/decimal/core.cljs", :line 24, :column 1, :end-line 24, :end-column 20, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/decimal/core.cljs", :line 24, :column 6, :end-line 24, :end-column 20}, :tag cljs.core/IMap}, truncate {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/decimal/core.cljs", :line 504, :column 7, :end-line 504, :end-column 15, :arglists (quote ([v])), :doc "Returns a new Decimal whose value is the value of this Decimal\n  truncated to a whole number."}, :name decimal.core/truncate, :variadic false, :file "resources/public/js/out/decimal/core.cljs", :end-column 15, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 504, :end-line 504, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :doc "Returns a new Decimal whose value is the value of this Decimal\n  truncated to a whole number."}, > {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/decimal/core.cljs", :line 203, :column 16, :end-line 203, :end-column 17, :tag boolean, :arglists (quote ([v x] [v x & more])), :doc "Returns true if the value of this Decimal is greater than\n  the value of x, otherwise returns false.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([v x]), :arglists ([v x] [v x & more]), :arglists-meta (nil nil)}}, :name decimal.core/>, :variadic true, :file "resources/public/js/out/decimal/core.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([v x]), :arglists ([v x] [v x & more]), :arglists-meta (nil nil)}, :method-params ([v x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 203, :ret-tag boolean, :end-line 203, :max-fixed-arity 2, :tag boolean, :fn-var true, :arglists ([v x] [v x & more]), :doc "Returns true if the value of this Decimal is greater than\n  the value of x, otherwise returns false."}, cmp {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/decimal/core.cljs", :line 239, :column 7, :end-line 239, :end-column 10, :arglists (quote ([v x])), :doc "Returns 1 if the value of this Decimal is greater than\n  the value of x, -1 if the value of this Decimal is less\n  than the value of x, 0 if the value of Decimal is equal\n  to the value of x and NaN if the value of this Decimal or\n  the value of x is NaN"}, :name decimal.core/cmp, :variadic false, :file "resources/public/js/out/decimal/core.cljs", :end-column 10, :method-params ([v x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 239, :end-line 239, :max-fixed-arity 2, :fn-var true, :arglists (quote ([v x])), :doc "Returns 1 if the value of this Decimal is greater than\n  the value of x, -1 if the value of this Decimal is less\n  than the value of x, 0 if the value of Decimal is equal\n  to the value of x and NaN if the value of this Decimal or\n  the value of x is NaN"}, sqrt {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/decimal/core.cljs", :line 415, :column 7, :end-line 415, :end-column 11, :arglists (quote ([v])), :doc "Returns a new Decimal whose value is the square root of this Decimal."}, :name decimal.core/sqrt, :variadic false, :file "resources/public/js/out/decimal/core.cljs", :end-column 11, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 415, :end-line 415, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :doc "Returns a new Decimal whose value is the square root of this Decimal."}, to-string {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/decimal/core.cljs", :line 636, :column 7, :end-line 636, :end-column 16, :arglists (quote ([v])), :doc "Returns a string representing the value of this Decimal.\n\n  If this Decimal has a positive exponent that is equal to or greater than\n  `to-exp-pos`, or a negative exponent equal to or less than `to-exp-neg`, then\n  exponential notation will be returned."}, :name decimal.core/to-string, :variadic false, :file "resources/public/js/out/decimal/core.cljs", :end-column 16, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 636, :end-line 636, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :doc "Returns a string representing the value of this Decimal.\n\n  If this Decimal has a positive exponent that is equal to or greater than\n  `to-exp-pos`, or a negative exponent equal to or less than `to-exp-neg`, then\n  exponential notation will be returned."}, config {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/decimal/core.cljs", :line 105, :column 7, :end-line 105, :end-column 13, :arglists (quote ([options])), :doc "The same as `config` but returns an constructor\n  of decimals that can be used for create new instances\n  with provided configuration."}, :name decimal.core/config, :variadic false, :file "resources/public/js/out/decimal/core.cljs", :end-column 13, :method-params ([options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 105, :end-line 105, :max-fixed-arity 1, :fn-var true, :arglists (quote ([options])), :doc "The same as `config` but returns an constructor\n  of decimals that can be used for create new instances\n  with provided configuration."}, ln {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/decimal/core.cljs", :line 467, :column 7, :end-line 467, :end-column 9, :arglists (quote ([v])), :doc "Returns a new Decimal whose value is the natural logarithm of\n  the value of this Decimal."}, :name decimal.core/ln, :variadic false, :file "resources/public/js/out/decimal/core.cljs", :end-column 9, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 467, :end-line 467, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :doc "Returns a new Decimal whose value is the natural logarithm of\n  the value of this Decimal."}, mod {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/decimal/core.cljs", :line 441, :column 7, :end-line 441, :end-column 10, :arglists (quote ([v x])), :doc "Returns a new Decimal whose value is the value of\n  this Decimal modulo `x`.\n\n  The value returned, and in particular its sign, is\n  dependent on the value of the modulo property of this\n  Decimal's constructor. If it is 1 (default value), the\n  result will have the same sign as this Decimal, and it\n  will match that of Javascript's `%` operator (within\n  the limits of double precision) and `BigDecimal`'s\n  remainder method.\n\n  See `config!` function docstrings for a description\n  and available options for `modulo`."}, :name decimal.core/mod, :variadic false, :file "resources/public/js/out/decimal/core.cljs", :end-column 10, :method-params ([v x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 441, :end-line 441, :max-fixed-arity 2, :fn-var true, :arglists (quote ([v x])), :doc "Returns a new Decimal whose value is the value of\n  this Decimal modulo `x`.\n\n  The value returned, and in particular its sign, is\n  dependent on the value of the modulo property of this\n  Decimal's constructor. If it is 1 (default value), the\n  result will have the same sign as this Decimal, and it\n  will match that of Javascript's `%` operator (within\n  the limits of double precision) and `BigDecimal`'s\n  remainder method.\n\n  See `config!` function docstrings for a description\n  and available options for `modulo`."}, to-octal {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/decimal/core.cljs", :line 589, :column 7, :end-line 589, :end-column 15, :arglists (quote ([v] [v sd] [v sd rm])), :doc "Returns a string representing the value of this Decimal in\n  octal notation rounded to `sd` significant digits\n  using rounding mode `rm`.\n\n  If `sd` is defined, the return value will use binary\n  exponential notation.\n\n  If `sd` is omitted, the return value will be rounded to\n  `precision` significant digits.\n\n  If `rm` is omitted, rounding mode `rounding` will be used.\n\n  Throws on an invalid `sd` or `rm` value.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([v] [v sd] [v sd rm]), :arglists ([v] [v sd] [v sd rm]), :arglists-meta (nil nil nil)}}, :name decimal.core/to-octal, :variadic false, :file "resources/public/js/out/decimal/core.cljs", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([v] [v sd] [v sd rm]), :arglists ([v] [v sd] [v sd rm]), :arglists-meta (nil nil nil)}, :method-params ([v] [v sd] [v sd rm]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 589, :end-line 589, :max-fixed-arity 3, :fn-var true, :arglists ([v] [v sd] [v sd rm]), :doc "Returns a string representing the value of this Decimal in\n  octal notation rounded to `sd` significant digits\n  using rounding mode `rm`.\n\n  If `sd` is defined, the return value will use binary\n  exponential notation.\n\n  If `sd` is omitted, the return value will be rounded to\n  `precision` significant digits.\n\n  If `rm` is omitted, rounding mode `rounding` will be used.\n\n  Throws on an invalid `sd` or `rm` value."}, - {:name decimal.core/-, :file "resources/public/js/out/decimal/core.cljs", :line 306, :column 1, :end-line 306, :end-column 7, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/decimal/core.cljs", :line 306, :column 6, :end-line 306, :end-column 7}}, to-decimal-places {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/decimal/core.cljs", :line 683, :column 7, :end-line 683, :end-column 24, :arglists (quote ([v] [v dp] [v dp rm])), :doc "Returns a new Decimal whose value is the value of this Decimal rounded to\n  `dp` decimal places using rounding mode `rm`.\n\n  If `dp` is omitted, the return value will have the same value as this\n  Decimal.\n\n  If `rm` is omitted, rounding mode `rounding` will be used.\n\n  Throws on an invalid `dp` or `rm` value.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([v] [v dp] [v dp rm]), :arglists ([v] [v dp] [v dp rm]), :arglists-meta (nil nil nil)}}, :name decimal.core/to-decimal-places, :variadic false, :file "resources/public/js/out/decimal/core.cljs", :end-column 24, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([v] [v dp] [v dp rm]), :arglists ([v] [v dp] [v dp rm]), :arglists-meta (nil nil nil)}, :method-params ([v] [v dp] [v dp rm]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 683, :end-line 683, :max-fixed-arity 3, :fn-var true, :arglists ([v] [v dp] [v dp rm]), :doc "Returns a new Decimal whose value is the value of this Decimal rounded to\n  `dp` decimal places using rounding mode `rm`.\n\n  If `dp` is omitted, the return value will have the same value as this\n  Decimal.\n\n  If `rm` is omitted, rounding mode `rounding` will be used.\n\n  Throws on an invalid `dp` or `rm` value."}, pow {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/decimal/core.cljs", :line 712, :column 7, :end-line 712, :end-column 10, :arglists (quote ([v x])), :doc "Returns a new Decimal whose value is the value of this Decimal raised to the\n  power x, rounded to precision significant digits using rounding mode\n  rounding.\n\n  The performance of this method degrades exponentially with increasing digits.\n  For non-integer exponents in particular, the performance of this method may\n  not be adequate."}, :name decimal.core/pow, :variadic false, :file "resources/public/js/out/decimal/core.cljs", :end-column 10, :method-params ([v x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 712, :end-line 712, :max-fixed-arity 2, :fn-var true, :arglists (quote ([v x])), :doc "Returns a new Decimal whose value is the value of this Decimal raised to the\n  power x, rounded to precision significant digits using rounding mode\n  rounding.\n\n  The performance of this method degrades exponentially with increasing digits.\n  For non-integer exponents in particular, the performance of this method may\n  not be adequate."}, exp {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/decimal/core.cljs", :line 458, :column 7, :end-line 458, :end-column 10, :arglists (quote ([v])), :doc "Returns a new Decimal whose value is the base e (Euler's number,\n  the base of the natural logarithm) exponential of the value of\n  this Decimal.\n\n  The `ln` is the invese of this function."}, :name decimal.core/exp, :variadic false, :file "resources/public/js/out/decimal/core.cljs", :end-column 10, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 458, :end-line 458, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :doc "Returns a new Decimal whose value is the base e (Euler's number,\n  the base of the natural logarithm) exponential of the value of\n  this Decimal.\n\n  The `ln` is the invese of this function."}, acosh {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/decimal/core.cljs", :line 380, :column 7, :end-line 380, :end-column 12, :arglists (quote ([v])), :doc "Returns a new Decimal whose value is the inverse hyperbolic\n  cosine in radians of the value of this Decimal."}, :name decimal.core/acosh, :variadic false, :file "resources/public/js/out/decimal/core.cljs", :end-column 12, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 380, :end-line 380, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :doc "Returns a new Decimal whose value is the inverse hyperbolic\n  cosine in radians of the value of this Decimal."}, precision {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/decimal/core.cljs", :line 510, :column 7, :end-line 510, :end-column 16, :arglists (quote ([v] [v include-zeros])), :doc "Returns the number of significant digits of the value of this Decimal.\n\n  If `include-zeros` is `true`, then the trailing zeros of the integer\n  part will be included in the counter of significant digits.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([v] [v include-zeros]), :arglists ([v] [v include-zeros]), :arglists-meta (nil nil)}}, :name decimal.core/precision, :variadic false, :file "resources/public/js/out/decimal/core.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([v] [v include-zeros]), :arglists ([v] [v include-zeros]), :arglists-meta (nil nil)}, :method-params ([v] [v include-zeros]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 510, :end-line 510, :max-fixed-arity 2, :fn-var true, :arglists ([v] [v include-zeros]), :doc "Returns the number of significant digits of the value of this Decimal.\n\n  If `include-zeros` is `true`, then the trailing zeros of the integer\n  part will be included in the counter of significant digits."}, zero? {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/decimal/core.cljs", :line 173, :column 16, :end-line 173, :end-column 21, :tag boolean, :arglists (quote ([v])), :doc "Returns true if the value of this Decimal is zero or\n  minus zero, otherwise returns false."}, :name decimal.core/zero?, :variadic false, :file "resources/public/js/out/decimal/core.cljs", :end-column 21, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 173, :ret-tag boolean, :end-line 173, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([v])), :doc "Returns true if the value of this Decimal is zero or\n  minus zero, otherwise returns false."}, round-mapping {:name decimal.core/round-mapping, :file "resources/public/js/out/decimal/core.cljs", :line 12, :column 1, :end-line 12, :end-column 19, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/decimal/core.cljs", :line 12, :column 6, :end-line 12, :end-column 19}, :tag cljs.core/IMap}, cosh {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/decimal/core.cljs", :line 374, :column 7, :end-line 374, :end-column 11, :arglists (quote ([v])), :doc "Returns a new Decimal whose value is the hyperbolic cosine\n  of the value in radians of this Decimal."}, :name decimal.core/cosh, :variadic false, :file "resources/public/js/out/decimal/core.cljs", :end-column 11, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 374, :end-line 374, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :doc "Returns a new Decimal whose value is the hyperbolic cosine\n  of the value in radians of this Decimal."}, minus {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/decimal/core.cljs", :line 258, :column 7, :end-line 258, :end-column 12, :arglists (quote ([v x])), :doc "Returns a new Decimal whose value is the value of this\n  Decimal minus x, rounded to significant digits."}, :name decimal.core/minus, :variadic false, :file "resources/public/js/out/decimal/core.cljs", :end-column 12, :method-params ([v x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 258, :end-line 258, :max-fixed-arity 2, :fn-var true, :arglists (quote ([v x])), :doc "Returns a new Decimal whose value is the value of this\n  Decimal minus x, rounded to significant digits."}, decimal-places {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/decimal/core.cljs", :line 498, :column 7, :end-line 498, :end-column 21, :arglists (quote ([v])), :doc "Returns the number of decimal places, i.e. the number\n  of digits after the decimal point, of the value of this Decimal."}, :name decimal.core/decimal-places, :variadic false, :file "resources/public/js/out/decimal/core.cljs", :end-column 21, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 498, :end-line 498, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :doc "Returns the number of decimal places, i.e. the number\n  of digits after the decimal point, of the value of this Decimal."}, div' {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/decimal/core.cljs", :line 276, :column 7, :end-line 276, :end-column 11, :arglists (quote ([v x])), :doc "Return a new Decimal whose value is the integer part\n  of dividing this Decimal by x, rounded to significant digits."}, :name decimal.core/div', :variadic false, :file "resources/public/js/out/decimal/core.cljs", :end-column 11, :method-params ([v x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 276, :end-line 276, :max-fixed-arity 2, :fn-var true, :arglists (quote ([v x])), :doc "Return a new Decimal whose value is the integer part\n  of dividing this Decimal by x, rounded to significant digits."}, / {:name decimal.core//, :meta {:file nil}, :file "resources/public/js/out/decimal/core.cljs", :line 304, :column 1}, to-number {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/decimal/core.cljs", :line 627, :column 7, :end-line 627, :end-column 16, :arglists (quote ([v])), :doc "Returns the value of this Decimal converted to a primitive number.\n\n  Type coercion with, for example, JavaScript's unary plus operator will also\n  work, except that a Decimal with the value minus zero will convert to\n  positive zero."}, :name decimal.core/to-number, :variadic false, :file "resources/public/js/out/decimal/core.cljs", :end-column 16, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 627, :end-line 627, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :doc "Returns the value of this Decimal converted to a primitive number.\n\n  Type coercion with, for example, JavaScript's unary plus operator will also\n  work, except that a Decimal with the value minus zero will convert to\n  positive zero."}, log2 {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/decimal/core.cljs", :line 430, :column 7, :end-line 430, :end-column 11, :arglists (quote ([x])), :doc "Returns a new Decimal whose value is the base 2 logarithm of `x`."}, :name decimal.core/log2, :variadic false, :file "resources/public/js/out/decimal/core.cljs", :end-column 11, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 430, :end-line 430, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Returns a new Decimal whose value is the base 2 logarithm of `x`."}, >= {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/decimal/core.cljs", :line 215, :column 16, :end-line 215, :end-column 18, :tag boolean, :arglists (quote ([v x] [v x & more])), :doc "Returns true if the value of this Decimal is greater than\n  or equal to the value of x, otherwise returns false.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([v x]), :arglists ([v x] [v x & more]), :arglists-meta (nil nil)}}, :name decimal.core/>=, :variadic true, :file "resources/public/js/out/decimal/core.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([v x]), :arglists ([v x] [v x & more]), :arglists-meta (nil nil)}, :method-params ([v x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 215, :ret-tag boolean, :end-line 215, :max-fixed-arity 2, :tag boolean, :fn-var true, :arglists ([v x] [v x & more]), :doc "Returns true if the value of this Decimal is greater than\n  or equal to the value of x, otherwise returns false."}, asin {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/decimal/core.cljs", :line 344, :column 7, :end-line 344, :end-column 11, :arglists (quote ([v])), :doc "Returns a new Decimal whose value is the inverse sine in\n  radians of the value of this Decimal."}, :name decimal.core/asin, :variadic false, :file "resources/public/js/out/decimal/core.cljs", :end-column 11, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 344, :end-line 344, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :doc "Returns a new Decimal whose value is the inverse sine in\n  radians of the value of this Decimal."}, integer? {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/decimal/core.cljs", :line 149, :column 16, :end-line 149, :end-column 24, :tag boolean, :arglists (quote ([v])), :doc "Returns true if the value of this Decimal is a whole\n  number, otherwise returns false."}, :name decimal.core/integer?, :variadic false, :file "resources/public/js/out/decimal/core.cljs", :end-column 24, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 149, :ret-tag boolean, :end-line 149, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([v])), :doc "Returns true if the value of this Decimal is a whole\n  number, otherwise returns false."}, div {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/decimal/core.cljs", :line 270, :column 7, :end-line 270, :end-column 10, :arglists (quote ([v x])), :doc "Returns a new Decimal whose value is the value of this\n  Decimal divided by x, rounded to significant digits."}, :name decimal.core/div, :variadic false, :file "resources/public/js/out/decimal/core.cljs", :end-column 10, :method-params ([v x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 270, :end-line 270, :max-fixed-arity 2, :fn-var true, :arglists (quote ([v x])), :doc "Returns a new Decimal whose value is the value of this\n  Decimal divided by x, rounded to significant digits."}, to-precision {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/decimal/core.cljs", :line 650, :column 7, :end-line 650, :end-column 19, :arglists (quote ([v] [v sd] [v sd rm])), :doc "Returns a string representing the value of this Decimal in\n  rounded to `sd` significant digits using rounding mode `rm`.\n\n  If `sd` is less than the number of digits necessary to represent the integer\n  part of the value in normal (fixed-point) notation, then exponential notation\n  is used.\n\n  If `sd` is omitted, the return value is the same as to-string.\n\n  If `rm` is omitted, rounding mode `rounding` will be used.\n\n  Throws on an invalid `sd` or `rm` value.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([v] [v sd] [v sd rm]), :arglists ([v] [v sd] [v sd rm]), :arglists-meta (nil nil nil)}}, :name decimal.core/to-precision, :variadic false, :file "resources/public/js/out/decimal/core.cljs", :end-column 19, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([v] [v sd] [v sd rm]), :arglists ([v] [v sd] [v sd rm]), :arglists-meta (nil nil nil)}, :method-params ([v] [v sd] [v sd rm]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 650, :end-line 650, :max-fixed-arity 3, :fn-var true, :arglists ([v] [v sd] [v sd rm]), :doc "Returns a string representing the value of this Decimal in\n  rounded to `sd` significant digits using rounding mode `rm`.\n\n  If `sd` is less than the number of digits necessary to represent the integer\n  part of the value in normal (fixed-point) notation, then exponential notation\n  is used.\n\n  If `sd` is omitted, the return value is the same as to-string.\n\n  If `rm` is omitted, rounding mode `rounding` will be used.\n\n  Throws on an invalid `sd` or `rm` value."}, round {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/decimal/core.cljs", :line 325, :column 7, :end-line 325, :end-column 12, :arglists (quote ([v])), :doc "Returns a new Decimal whose value is the value of this Decimal\n  rounded to a whole number.\n  To emulate Math.round, set rounding to 7 (or :round/hanf-ceil)."}, :name decimal.core/round, :variadic false, :file "resources/public/js/out/decimal/core.cljs", :end-column 12, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 325, :end-line 325, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :doc "Returns a new Decimal whose value is the value of this Decimal\n  rounded to a whole number.\n  To emulate Math.round, set rounding to 7 (or :round/hanf-ceil)."}, to-exponential {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/decimal/core.cljs", :line 541, :column 7, :end-line 541, :end-column 21, :arglists (quote ([v] [v dp] [v dp rm])), :doc "Returns a string representing the value of this Decimal in\n  exponential notation rounded using rounding mode `rm` to `dp`\n  decimal places.\n\n  If the value of this Decimal in exponential notation has fewer\n  than `dp` fraction digits, the return value will be appended\n  with zeros accordingly.\n\n  If `dp` is omitted, the number of digits after the decimal\n  point defaults to the minimum number of digits necessary to\n  represent the value exactly.\n\n  If `rm` is omitted, rounding mode rounding is used.\n\n  Throws on an invalid `dp` or `rm` value.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([v] [v dp] [v dp rm]), :arglists ([v] [v dp] [v dp rm]), :arglists-meta (nil nil nil)}}, :name decimal.core/to-exponential, :variadic false, :file "resources/public/js/out/decimal/core.cljs", :end-column 21, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([v] [v dp] [v dp rm]), :arglists ([v] [v dp] [v dp rm]), :arglists-meta (nil nil nil)}, :method-params ([v] [v dp] [v dp rm]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 541, :end-line 541, :max-fixed-arity 3, :fn-var true, :arglists ([v] [v dp] [v dp rm]), :doc "Returns a string representing the value of this Decimal in\n  exponential notation rounded using rounding mode `rm` to `dp`\n  decimal places.\n\n  If the value of this Decimal in exponential notation has fewer\n  than `dp` fraction digits, the return value will be appended\n  with zeros accordingly.\n\n  If `dp` is omitted, the number of digits after the decimal\n  point defaults to the minimum number of digits necessary to\n  represent the value exactly.\n\n  If `rm` is omitted, rounding mode rounding is used.\n\n  Throws on an invalid `dp` or `rm` value."}, mul {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/decimal/core.cljs", :line 264, :column 7, :end-line 264, :end-column 10, :arglists (quote ([v x])), :doc "Returns a new Decimal whose value is the value of this\n  Decimal times x, rounded to significant digits using."}, :name decimal.core/mul, :variadic false, :file "resources/public/js/out/decimal/core.cljs", :end-column 10, :method-params ([v x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 264, :end-line 264, :max-fixed-arity 2, :fn-var true, :arglists (quote ([v x])), :doc "Returns a new Decimal whose value is the value of this\n  Decimal times x, rounded to significant digits using."}, + {:name decimal.core/+, :file "resources/public/js/out/decimal/core.cljs", :line 305, :column 1, :end-line 305, :end-column 7, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/decimal/core.cljs", :line 305, :column 6, :end-line 305, :end-column 7}}, abs {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/decimal/core.cljs", :line 332, :column 7, :end-line 332, :end-column 10, :arglists (quote ([v])), :doc "Returns a new Decimal whose value is the absolute value, i.e.\n  the magnitude, of the value of this Decimal."}, :name decimal.core/abs, :variadic false, :file "resources/public/js/out/decimal/core.cljs", :end-column 10, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 332, :end-line 332, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :doc "Returns a new Decimal whose value is the absolute value, i.e.\n  the magnitude, of the value of this Decimal."}, to-fraction {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/decimal/core.cljs", :line 698, :column 7, :end-line 698, :end-column 18, :arglists (quote ([v] [v max-denominator])), :doc "Returns an array of two Decimals representing the value of this Decimal as a\n  simple fraction with an integer numerator and an integer denominator. The\n  denominator will be a positive non-zero value less than or equal to\n  `max_denominator`.\n\n  If a maximum denominator is omitted, the denominator will be the lowest value\n  necessary to represent the number exactly.\n\n  Throws on an invalid `max_denominator` value.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([v] [v max-denominator]), :arglists ([v] [v max-denominator]), :arglists-meta (nil nil)}}, :name decimal.core/to-fraction, :variadic false, :file "resources/public/js/out/decimal/core.cljs", :end-column 18, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([v] [v max-denominator]), :arglists ([v] [v max-denominator]), :arglists-meta (nil nil)}, :method-params ([v] [v max-denominator]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 698, :end-line 698, :max-fixed-arity 2, :fn-var true, :arglists ([v] [v max-denominator]), :doc "Returns an array of two Decimals representing the value of this Decimal as a\n  simple fraction with an integer numerator and an integer denominator. The\n  denominator will be a positive non-zero value less than or equal to\n  `max_denominator`.\n\n  If a maximum denominator is omitted, the denominator will be the lowest value\n  necessary to represent the number exactly.\n\n  Throws on an invalid `max_denominator` value."}, value-of {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/decimal/core.cljs", :line 645, :column 7, :end-line 645, :end-column 15, :arglists (quote ([v])), :doc "As toString, but zero is signed."}, :name decimal.core/value-of, :variadic false, :file "resources/public/js/out/decimal/core.cljs", :end-column 15, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 645, :end-line 645, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :doc "As toString, but zero is signed."}, sinh {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/decimal/core.cljs", :line 350, :column 7, :end-line 350, :end-column 11, :arglists (quote ([v])), :doc "Returns a new Decimal whose value is the hyperbolic sine of\n  the value in radians of this Decimal."}, :name decimal.core/sinh, :variadic false, :file "resources/public/js/out/decimal/core.cljs", :end-column 11, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 350, :end-line 350, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :doc "Returns a new Decimal whose value is the hyperbolic sine of\n  the value in radians of this Decimal."}, config! {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/decimal/core.cljs", :line 31, :column 7, :end-line 31, :end-column 14, :arglists (quote ([options])), :doc "Set the global configuration for the decimal constructor.\n\n  Possible options:\n\n  - `precision`: The maximum number of significant digits of\n    the result of an operation (integer 1 to 1e+9 inclusive,\n    default: 20).\n  - `rounding`: The default rounding mode used when rounding\n    the result of an operation (integer 0 to 8 inclusive,\n    default: :round-half-up).\n  - `min-e`: The negative exponent limit, i.e. the exponent value below\n    which underflow to zero occurs (integer, -9e15 to 0 inclusive, default:\n    -9e15).\n  - `max-e`: The positive exponent limit, i.e. the exponent value above\n    which overflow to Infinity occurs (integer, 0 to 9e15 inclusive, default:\n    9e15).\n  - `to-exp-neg`: The negative exponent value at and below which `toString`\n    returns exponential notation. (integer, -9e15 to 0 inclusive, default: -7)\n  - `to-exp-pos`: The positive exponent value at and above which `toString`\n    returns exponential notation. (integer, 0 to 9e15 inclusive, default: 20)\n  - `modulo`: The modulo mode used when calculating the modulus: `a mod n`.\n    (integer, 0 to 9 inclusive, default: :round-down)\n  - `crypto`: The value that determines whether cryptographically-secure\n    pseudo-random number generation is used. (boolean, default: false)\n\n  **Rounding modes**\n\n  Rounding modes are:\n\n  Keyword           |  Description\n  ------------------|-------------\n  :round-up         |  Rounds away from zero\n  :round-down       |  Rounds towards zero\n  :round-ceil       |  Rounds towards Infinity\n  :round-floor      |  Rounds towards -Infinity\n  :round-half-up    |  Rounds towards nearest neighbour. If equidistant, rounds away from zero\n  :round-half-down  |  Rounds towards nearest neighbour. If equidistant, rounds towards zero\n  :round-half-even  |  Rounds towards nearest neighbour. If equidistant, rounds towards even neighbour\n  :round-half-ceil  |  Rounds towards nearest neighbour. If equidistant, rounds towards Infinity\n  :round-half-floor |  Rounds towards nearest neighbour. If equidistant, rounds towards -Infinity\n  :euclid           |  Not a rounding mode, see modulo\n\n  **Modulo modes**\n\n  The modes that are most commonly used for the modulus/remainder operation\n  are shown in the following table. Although the other rounding modes can be used,\n  they may not give useful results.\n\n  Keyword           | Description\n  ------------------|------------\n  :round-up         | The remainder is positive if the dividend is negative, else is negative\n  :round-down       | The remainder has the same sign as the dividend. This uses truncating division and matches the behaviour of JavaScript's remainder operator %.\n  :round-floor      | The remainder has the same sign as the divisor. (This matches Python's % operator)\n  :round-half-even  | The IEEE 754 remainder function\n  :euclid           | The remainder is always positive.\n\n  **Other options**\n\n  The underlying library supports more options that and this\n  function also accepts. You can read more about here:\n  http://mikemcl.github.io/decimal.js/#Dconfig"}, :name decimal.core/config!, :variadic false, :file "resources/public/js/out/decimal/core.cljs", :end-column 14, :method-params ([options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 31, :max-fixed-arity 1, :fn-var true, :arglists (quote ([options])), :doc "Set the global configuration for the decimal constructor.\n\n  Possible options:\n\n  - `precision`: The maximum number of significant digits of\n    the result of an operation (integer 1 to 1e+9 inclusive,\n    default: 20).\n  - `rounding`: The default rounding mode used when rounding\n    the result of an operation (integer 0 to 8 inclusive,\n    default: :round-half-up).\n  - `min-e`: The negative exponent limit, i.e. the exponent value below\n    which underflow to zero occurs (integer, -9e15 to 0 inclusive, default:\n    -9e15).\n  - `max-e`: The positive exponent limit, i.e. the exponent value above\n    which overflow to Infinity occurs (integer, 0 to 9e15 inclusive, default:\n    9e15).\n  - `to-exp-neg`: The negative exponent value at and below which `toString`\n    returns exponential notation. (integer, -9e15 to 0 inclusive, default: -7)\n  - `to-exp-pos`: The positive exponent value at and above which `toString`\n    returns exponential notation. (integer, 0 to 9e15 inclusive, default: 20)\n  - `modulo`: The modulo mode used when calculating the modulus: `a mod n`.\n    (integer, 0 to 9 inclusive, default: :round-down)\n  - `crypto`: The value that determines whether cryptographically-secure\n    pseudo-random number generation is used. (boolean, default: false)\n\n  **Rounding modes**\n\n  Rounding modes are:\n\n  Keyword           |  Description\n  ------------------|-------------\n  :round-up         |  Rounds away from zero\n  :round-down       |  Rounds towards zero\n  :round-ceil       |  Rounds towards Infinity\n  :round-floor      |  Rounds towards -Infinity\n  :round-half-up    |  Rounds towards nearest neighbour. If equidistant, rounds away from zero\n  :round-half-down  |  Rounds towards nearest neighbour. If equidistant, rounds towards zero\n  :round-half-even  |  Rounds towards nearest neighbour. If equidistant, rounds towards even neighbour\n  :round-half-ceil  |  Rounds towards nearest neighbour. If equidistant, rounds towards Infinity\n  :round-half-floor |  Rounds towards nearest neighbour. If equidistant, rounds towards -Infinity\n  :euclid           |  Not a rounding mode, see modulo\n\n  **Modulo modes**\n\n  The modes that are most commonly used for the modulus/remainder operation\n  are shown in the following table. Although the other rounding modes can be used,\n  they may not give useful results.\n\n  Keyword           | Description\n  ------------------|------------\n  :round-up         | The remainder is positive if the dividend is negative, else is negative\n  :round-down       | The remainder has the same sign as the dividend. This uses truncating division and matches the behaviour of JavaScript's remainder operator %.\n  :round-floor      | The remainder has the same sign as the divisor. (This matches Python's % operator)\n  :round-half-even  | The IEEE 754 remainder function\n  :euclid           | The remainder is always positive.\n\n  **Other options**\n\n  The underlying library supports more options that and this\n  function also accepts. You can read more about here:\n  http://mikemcl.github.io/decimal.js/#Dconfig"}, max {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/decimal/core.cljs", :line 282, :column 7, :end-line 282, :end-column 10, :arglists (quote ([a] [a b] [a b & more])), :doc "Returns a new Decimal whose value is the maximum.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([a] [a b]), :arglists ([a] [a b] [a b & more]), :arglists-meta (nil nil nil)}}, :name decimal.core/max, :variadic true, :file "resources/public/js/out/decimal/core.cljs", :end-column 10, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([a] [a b]), :arglists ([a] [a b] [a b & more]), :arglists-meta (nil nil nil)}, :method-params ([a] [a b]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 282, :end-line 282, :max-fixed-arity 2, :fn-var true, :arglists ([a] [a b] [a b & more]), :doc "Returns a new Decimal whose value is the maximum."}, decimal {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/decimal/core.cljs", :line 127, :column 7, :end-line 127, :end-column 14, :arglists (quote ([v])), :doc "Create a new Decimal instance from `v` value."}, :name decimal.core/decimal, :variadic false, :file "resources/public/js/out/decimal/core.cljs", :end-column 14, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 127, :end-line 127, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :doc "Create a new Decimal instance from `v` value."}, plus {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/decimal/core.cljs", :line 252, :column 7, :end-line 252, :end-column 11, :arglists (quote ([v x])), :doc "Returns a new Decimal whose value is the value of this\n  Decimal plus x, rounded to significant digits."}, :name decimal.core/plus, :variadic false, :file "resources/public/js/out/decimal/core.cljs", :end-column 11, :method-params ([v x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 252, :end-line 252, :max-fixed-arity 2, :fn-var true, :arglists (quote ([v x])), :doc "Returns a new Decimal whose value is the value of this\n  Decimal plus x, rounded to significant digits."}, atanh {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/decimal/core.cljs", :line 404, :column 7, :end-line 404, :end-column 12, :arglists (quote ([v])), :doc "Returns a new Decimal whose value is the inverse hyperbolic\n  tangent in radians of the value of this Decimal."}, :name decimal.core/atanh, :variadic false, :file "resources/public/js/out/decimal/core.cljs", :end-column 12, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 404, :end-line 404, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :doc "Returns a new Decimal whose value is the inverse hyperbolic\n  tangent in radians of the value of this Decimal."}, to-significant-digits {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/decimal/core.cljs", :line 668, :column 7, :end-line 668, :end-column 28, :arglists (quote ([v] [v sd] [v sd rm])), :doc "Returns a new Decimal whose value is the value of this Decimal rounded to\n  `sd` significant digits using rounding mode `rm`.\n\n  If `sd` is omitted, the return value will be rounded to\n  `precision` significant digits.\n\n  If `rm` is omitted, rounding mode `rounding` will be used.\n\n  Throws on an invalid `sd` or `rm` value.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([v] [v sd] [v sd rm]), :arglists ([v] [v sd] [v sd rm]), :arglists-meta (nil nil nil)}}, :name decimal.core/to-significant-digits, :variadic false, :file "resources/public/js/out/decimal/core.cljs", :end-column 28, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([v] [v sd] [v sd rm]), :arglists ([v] [v sd] [v sd rm]), :arglists-meta (nil nil nil)}, :method-params ([v] [v sd] [v sd rm]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 668, :end-line 668, :max-fixed-arity 3, :fn-var true, :arglists ([v] [v sd] [v sd rm]), :doc "Returns a new Decimal whose value is the value of this Decimal rounded to\n  `sd` significant digits using rounding mode `rm`.\n\n  If `sd` is omitted, the return value will be rounded to\n  `precision` significant digits.\n\n  If `rm` is omitted, rounding mode `rounding` will be used.\n\n  Throws on an invalid `sd` or `rm` value."}, sin {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/decimal/core.cljs", :line 338, :column 7, :end-line 338, :end-column 10, :arglists (quote ([v])), :doc "Returns a new Decimal whose value is the sine of the value\n  in radians of this Decimal."}, :name decimal.core/sin, :variadic false, :file "resources/public/js/out/decimal/core.cljs", :end-column 10, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 338, :end-line 338, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :doc "Returns a new Decimal whose value is the sine of the value\n  in radians of this Decimal."}, random {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/decimal/core.cljs", :line 484, :column 7, :end-line 484, :end-column 13, :arglists (quote ([dp])), :doc "Returns a new Decimal with a pseudo-random value equal to or greater\n  than 0 and less than 1.\n  The return value will have `dp` decimal places (or less if trailing\n  zeros are produced). If dp is omitted then the default will be used.\n\n  Detailed doc: http://mikemcl.github.io/decimal.js/#Drandom"}, :name decimal.core/random, :variadic false, :file "resources/public/js/out/decimal/core.cljs", :end-column 13, :method-params ([dp]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 484, :end-line 484, :max-fixed-arity 1, :fn-var true, :arglists (quote ([dp])), :doc "Returns a new Decimal with a pseudo-random value equal to or greater\n  than 0 and less than 1.\n  The return value will have `dp` decimal places (or less if trailing\n  zeros are produced). If dp is omitted then the default will be used.\n\n  Detailed doc: http://mikemcl.github.io/decimal.js/#Drandom"}}, :cljs.spec/registry-ref [], :require-macros nil, :cljs.analyzer/constants {:seen #{:round-ceil :round-floor :to-exp-pos :round-half-even :precision :to-exp-neg :round-half-down :min-e :round-half-ceil :round-half-up :round-half-floor :max-e :crypto :modulo :round-down :round-up :rounding :euclid}, :order [:round-ceil :round-floor :round-half-even :round-half-down :round-half-ceil :round-half-up :round-half-floor :round-down :round-up :euclid :precision :rounding :modulo :min-e :max-e :to-exp-neg :to-exp-pos :crypto]}, :doc nil}