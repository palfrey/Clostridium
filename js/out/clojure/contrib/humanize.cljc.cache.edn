{:rename-macros {}, :renames {}, :externs {Math {pow {}, floor {}, round {}, abs {}, log {}, log10 {}, LN10 {}}, Error {}}, :use-macros {join clojure.string, pluralize-noun clojure.contrib.inflect, in? clojure.contrib.inflect, with-dt-diff clojure.contrib.macros}, :excludes #{}, :name clojure.contrib.humanize, :imports nil, :requires {clojure.contrib.inflect clojure.contrib.inflect, clojure.string clojure.string, cljs-time.core cljs-time.core, gstring goog.string, goog.string goog.string, goog.string.format goog.string.format, cljs-time.local cljs-time.local, cljs-time.coerce cljs-time.coerce}, :cljs.spec/speced-vars [], :uses {interval cljs-time.core, in-months cljs-time.core, in-weeks cljs-time.core, join clojure.string, in-seconds cljs-time.core, after? cljs-time.core, in-minutes cljs-time.core, pluralize-noun clojure.contrib.inflect, date-time cljs-time.core, local-now cljs-time.local, to-string cljs-time.coerce, in? clojure.contrib.inflect, in-days cljs-time.core, in-hours cljs-time.core, in-years cljs-time.core, to-date-time cljs-time.coerce}, :defs {duration-periods {:name clojure.contrib.humanize/duration-periods, :file "resources/public/js/out/clojure/contrib/humanize.cljc", :line 297, :column 1, :end-line 297, :end-column 32, :private true, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/clojure/contrib/humanize.cljc", :line 297, :column 16, :end-line 297, :end-column 32, :private true}, :tag cljs.core/IVector}, log {:name clojure.contrib.humanize/log, :file "resources/public/js/out/clojure/contrib/humanize.cljc", :line 29, :column 10, :end-line 29, :end-column 28, :private true, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/clojure/contrib/humanize.cljc", :line 29, :column 25, :end-line 29, :end-column 28, :private true}, :tag js}, floor {:name clojure.contrib.humanize/floor, :file "resources/public/js/out/clojure/contrib/humanize.cljc", :line 24, :column 10, :end-line 24, :end-column 30, :private true, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/clojure/contrib/humanize.cljc", :line 24, :column 25, :end-line 24, :end-column 30, :private true}, :tag js}, numap {:name clojure.contrib.humanize/numap, :file "resources/public/js/out/clojure/contrib/humanize.cljc", :line 112, :column 1, :end-line 112, :end-column 21, :private true, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/clojure/contrib/humanize.cljc", :line 112, :column 16, :end-line 112, :end-column 21, :private true}, :tag cljs.core/IMap}, numberword {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/clojure/contrib/humanize.cljc", :line 120, :column 7, :end-line 120, :end-column 17, :arglists (quote ([num])), :doc "Takes a number and return a full written string form. For example,\n   23237897 will be written as \"twenty-three million two hundred and\n   thirty-seven thousand eight hundred and ninety-seven\".  "}, :name clojure.contrib.humanize/numberword, :variadic false, :file "resources/public/js/out/clojure/contrib/humanize.cljc", :end-column 17, :method-params ([num]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 120, :end-line 120, :max-fixed-arity 1, :fn-var true, :arglists (quote ([num])), :doc "Takes a number and return a full written string form. For example,\n   23237897 will be written as \"twenty-three million two hundred and\n   thirty-seven thousand eight hundred and ninety-seven\".  "}, expt {:name clojure.contrib.humanize/expt, :file "resources/public/js/out/clojure/contrib/humanize.cljc", :line 23, :column 10, :end-line 23, :end-column 29, :private true, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/clojure/contrib/humanize.cljc", :line 23, :column 25, :end-line 23, :end-column 29, :private true}, :tag js}, log10 {:name clojure.contrib.humanize/log10, :file "resources/public/js/out/clojure/contrib/humanize.cljc", :line 34, :column 10, :end-line 34, :end-column 30, :private true, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/clojure/contrib/humanize.cljc", :line 34, :column 25, :end-line 34, :end-column 30, :private true}, :tag #{js function}}, truncate {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/clojure/contrib/humanize.cljc", :line 191, :column 7, :end-line 191, :end-column 15, :arglists (quote ([string length suffix] [string length])), :doc "Truncate a string with suffix (ellipsis by default) if it is\n   longer than specified length.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([string length suffix] [string length]), :arglists ([string length suffix] [string length]), :arglists-meta (nil nil)}}, :name clojure.contrib.humanize/truncate, :variadic false, :file "resources/public/js/out/clojure/contrib/humanize.cljc", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([string length suffix] [string length]), :arglists ([string length suffix] [string length]), :arglists-meta (nil nil)}, :method-params ([string length suffix] [string length]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 191, :end-line 191, :max-fixed-arity 3, :fn-var true, :arglists ([string length suffix] [string length]), :doc "Truncate a string with suffix (ellipsis by default) if it is\n   longer than specified length."}, logn {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/clojure/contrib/humanize.cljc", :line 82, :column 7, :end-line 82, :end-column 11, :arglists (quote ([num base]))}, :name clojure.contrib.humanize/logn, :variadic false, :file "resources/public/js/out/clojure/contrib/humanize.cljc", :end-column 11, :method-params ([num base]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 82, :end-line 82, :max-fixed-arity 2, :fn-var true, :arglists (quote ([num base]))}, rounding-const {:name clojure.contrib.humanize/rounding-const, :file "resources/public/js/out/clojure/contrib/humanize.cljc", :line 31, :column 10, :end-line 31, :end-column 39, :private true, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/clojure/contrib/humanize.cljc", :line 31, :column 25, :end-line 31, :end-column 39, :private true}, :tag number}, oxford {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/clojure/contrib/humanize.cljc", :line 206, :column 7, :end-line 206, :end-column 13, :arglists (quote ([coll & {:keys [maximum-display truncate-noun], :or {maximum-display 4, truncate-noun nil}}])), :doc "Converts a list of items to a human readable string\n   with an optional limit.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(coll {:keys [maximum-display truncate-noun], :or {maximum-display 4, truncate-noun nil}})], :arglists ([coll & {:keys [maximum-display truncate-noun], :or {maximum-display 4, truncate-noun nil}}]), :arglists-meta (nil)}}, :name clojure.contrib.humanize/oxford, :variadic true, :file "resources/public/js/out/clojure/contrib/humanize.cljc", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(coll {:keys [maximum-display truncate-noun], :or {maximum-display 4, truncate-noun nil}})], :arglists ([coll & {:keys [maximum-display truncate-noun], :or {maximum-display 4, truncate-noun nil}}]), :arglists-meta (nil)}, :method-params [(coll {:keys [maximum-display truncate-noun], :or {maximum-display 4, truncate-noun nil}})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 206, :end-line 206, :max-fixed-arity 1, :fn-var true, :arglists ([coll & {:keys [maximum-display truncate-noun], :or {maximum-display 4, truncate-noun nil}}]), :doc "Converts a list of items to a human readable string\n   with an optional limit."}, human-pows {:name clojure.contrib.humanize/human-pows, :file "resources/public/js/out/clojure/contrib/humanize.cljc", :line 87, :column 1, :end-line 87, :end-column 26, :private true, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/clojure/contrib/humanize.cljc", :line 87, :column 16, :end-line 87, :end-column 26, :private true}, :tag cljs.core/IVector}, ordinal {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/clojure/contrib/humanize.cljc", :line 68, :column 7, :end-line 68, :end-column 14, :arglists (quote ([num])), :doc "Converts an integer to its ordinal as a string. 1 is '1st', 2 is '2nd',\n   3 is '3rd', etc."}, :name clojure.contrib.humanize/ordinal, :variadic false, :file "resources/public/js/out/clojure/contrib/humanize.cljc", :end-column 14, :method-params ([num]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 68, :end-line 68, :max-fixed-arity 1, :fn-var true, :arglists (quote ([num])), :doc "Converts an integer to its ordinal as a string. 1 is '1st', 2 is '2nd',\n   3 is '3rd', etc."}, duration {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/clojure/contrib/humanize.cljc", :line 331, :column 7, :end-line 331, :end-column 15, :arglists (quote ([duration-ms] [duration-ms options])), :doc "Converts duration, in milliseconds, into a string describing it in terms\n  of years, months, weeks, days, hours, minutes, and seconds.\n\n  Ex:\n\n     (duration 325100) => \"five minutes, twenty-five seconds\"\n\n  The months and years periods are not based on actual calendar, so are approximate; this\n  function works best for shorter periods of time.\n\n  The optional options map allow some control over the result.\n\n  :list-format (default: a function) can be set to a function such as oxford\n\n  :number-format (default: numberword) function used to format period counts\n\n  :short-text (default: \"less than a second\") ", :added "0.2.1", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([duration-ms] [duration-ms options]), :arglists ([duration-ms] [duration-ms options]), :arglists-meta (nil nil)}}, :added "0.2.1", :name clojure.contrib.humanize/duration, :variadic false, :file "resources/public/js/out/clojure/contrib/humanize.cljc", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([duration-ms] [duration-ms options]), :arglists ([duration-ms] [duration-ms options]), :arglists-meta (nil nil)}, :method-params ([duration-ms] [duration-ms options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 331, :end-line 331, :max-fixed-arity 2, :fn-var true, :arglists ([duration-ms] [duration-ms options]), :doc "Converts duration, in milliseconds, into a string describing it in terms\n  of years, months, weeks, days, hours, minutes, and seconds.\n\n  Ex:\n\n     (duration 325100) => \"five minutes, twenty-five seconds\"\n\n  The months and years periods are not based on actual calendar, so are approximate; this\n  function works best for shorter periods of time.\n\n  The optional options map allow some control over the result.\n\n  :list-format (default: a function) can be set to a function such as oxford\n\n  :number-format (default: numberword) function used to format period counts\n\n  :short-text (default: \"less than a second\") "}, intcomma {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/clojure/contrib/humanize.cljc", :line 44, :column 7, :end-line 44, :end-column 15, :arglists (quote ([num])), :doc "Converts an integer to a string containing commas. every three digits.\n   For example, 3000 becomes '3,000' and 45000 becomes '45,000'. "}, :name clojure.contrib.humanize/intcomma, :variadic false, :file "resources/public/js/out/clojure/contrib/humanize.cljc", :end-column 15, :method-params ([num]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 44, :end-line 44, :max-fixed-arity 1, :fn-var true, :arglists (quote ([num])), :doc "Converts an integer to a string containing commas. every three digits.\n   For example, 3000 becomes '3,000' and 45000 becomes '45,000'. "}, in-millennia {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/clojure/contrib/humanize.cljc", :line 243, :column 8, :end-line 243, :end-column 20, :private true, :arglists (quote ([diff]))}, :private true, :name clojure.contrib.humanize/in-millennia, :variadic false, :file "resources/public/js/out/clojure/contrib/humanize.cljc", :end-column 20, :method-params ([diff]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 243, :end-line 243, :max-fixed-arity 1, :fn-var true, :arglists (quote ([diff]))}, char->int {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/clojure/contrib/humanize.cljc", :line 42, :column 25, :end-line 42, :end-column 34, :private true}, :private true, :name clojure.contrib.humanize/char->int, :variadic false, :file "resources/public/js/out/clojure/contrib/humanize.cljc", :end-column 34, :method-params ([p1__30005#]), :protocol-impl nil, :arglists-meta (), :column 10, :line 42, :end-line 42, :max-fixed-arity 1, :fn-var true, :arglists nil}, duration-terms {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/clojure/contrib/humanize.cljc", :line 306, :column 8, :end-line 306, :end-column 22, :private true, :arglists (quote ([duration-ms])), :doc "Converts a duration, in milliseconds, to a set of terms describing the duration.\n  The terms are in descending order, largest period to smallest.\n\n  Each term is a tuple of count and period name, e.g., `[5 \"second\"]`.\n\n  After seconds are accounted for, remaining milliseconds are ignored."}, :private true, :name clojure.contrib.humanize/duration-terms, :variadic false, :file "resources/public/js/out/clojure/contrib/humanize.cljc", :end-column 22, :method-params ([duration-ms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 306, :end-line 306, :max-fixed-arity 1, :fn-var true, :arglists (quote ([duration-ms])), :doc "Converts a duration, in milliseconds, to a set of terms describing the duration.\n  The terms are in descending order, largest period to smallest.\n\n  Each term is a tuple of count and period name, e.g., `[5 \"second\"]`.\n\n  After seconds are accounted for, remaining milliseconds are ignored."}, intword {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/clojure/contrib/humanize.cljc", :line 100, :column 7, :end-line 100, :end-column 14, :arglists (quote ([num & {:keys [format], :or {format "%.1f"}}])), :doc "Converts a large integer to a friendly text representation. Works best for\n   numbers over 1 million. For example, 1000000 becomes '1.0 million', 1200000\n   becomes '1.2 million' and '1200000000' becomes '1.2 billion'.  Supports up to\n   decillion (33 digits) and googol (100 digits).", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(num {:keys [format], :or {format "%.1f"}})], :arglists ([num & {:keys [format], :or {format "%.1f"}}]), :arglists-meta (nil)}}, :name clojure.contrib.humanize/intword, :variadic true, :file "resources/public/js/out/clojure/contrib/humanize.cljc", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(num {:keys [format], :or {format "%.1f"}})], :arglists ([num & {:keys [format], :or {format "%.1f"}}]), :arglists-meta (nil)}, :method-params [(num {:keys [format], :or {format "%.1f"}})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 100, :end-line 100, :max-fixed-arity 1, :fn-var true, :arglists ([num & {:keys [format], :or {format "%.1f"}}]), :doc "Converts a large integer to a friendly text representation. Works best for\n   numbers over 1 million. For example, 1000000 becomes '1.0 million', 1200000\n   becomes '1.2 million' and '1200000000' becomes '1.2 billion'.  Supports up to\n   decillion (33 digits) and googol (100 digits)."}, round {:name clojure.contrib.humanize/round, :file "resources/public/js/out/clojure/contrib/humanize.cljc", :line 25, :column 10, :end-line 25, :end-column 30, :private true, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/clojure/contrib/humanize.cljc", :line 25, :column 25, :end-line 25, :end-column 30, :private true}, :tag js}, in-centuries {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/clojure/contrib/humanize.cljc", :line 240, :column 8, :end-line 240, :end-column 20, :private true, :arglists (quote ([diff]))}, :private true, :name clojure.contrib.humanize/in-centuries, :variadic false, :file "resources/public/js/out/clojure/contrib/humanize.cljc", :end-column 20, :method-params ([diff]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 240, :end-line 240, :max-fixed-arity 1, :fn-var true, :arglists (quote ([diff]))}, abs {:name clojure.contrib.humanize/abs, :file "resources/public/js/out/clojure/contrib/humanize.cljc", :line 26, :column 10, :end-line 26, :end-column 28, :private true, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/clojure/contrib/humanize.cljc", :line 26, :column 25, :end-line 26, :end-column 28, :private true}, :tag js}, in-decades {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/clojure/contrib/humanize.cljc", :line 237, :column 8, :end-line 237, :end-column 18, :private true, :arglists (quote ([diff]))}, :private true, :name clojure.contrib.humanize/in-decades, :variadic false, :file "resources/public/js/out/clojure/contrib/humanize.cljc", :end-column 18, :method-params ([diff]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 237, :end-line 237, :max-fixed-arity 1, :fn-var true, :arglists (quote ([diff]))}, datetime {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/clojure/contrib/humanize.cljc", :line 246, :column 7, :end-line 246, :end-column 15, :arglists (quote ([then-dt & {:keys [now-dt suffix prefix], :or {now-dt (local-now), suffix "ago", prefix "in"}}])), :doc "Given a datetime or date, return a human-friendly representation\n   of the amount of time elapsed. ", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(then-dt {:keys [now-dt suffix prefix], :or {now-dt (local-now), suffix "ago", prefix "in"}})], :arglists ([then-dt & {:keys [now-dt suffix prefix], :or {now-dt (local-now), suffix "ago", prefix "in"}}]), :arglists-meta (nil)}}, :name clojure.contrib.humanize/datetime, :variadic true, :file "resources/public/js/out/clojure/contrib/humanize.cljc", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(then-dt {:keys [now-dt suffix prefix], :or {now-dt (local-now), suffix "ago", prefix "in"}})], :arglists ([then-dt & {:keys [now-dt suffix prefix], :or {now-dt (local-now), suffix "ago", prefix "in"}}]), :arglists-meta (nil)}, :method-params [(then-dt {:keys [now-dt suffix prefix], :or {now-dt (local-now), suffix "ago", prefix "in"}})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 246, :end-line 246, :max-fixed-arity 1, :fn-var true, :arglists ([then-dt & {:keys [now-dt suffix prefix], :or {now-dt (local-now), suffix "ago", prefix "in"}}]), :doc "Given a datetime or date, return a human-friendly representation\n   of the amount of time elapsed. "}, num-format {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/clojure/contrib/humanize.cljc", :line 21, :column 25, :end-line 21, :end-column 35, :private true}, :private true, :name clojure.contrib.humanize/num-format, :variadic false, :file "resources/public/js/out/clojure/contrib/humanize.cljc", :end-column 35, :method-params ([p1__29999# p2__30000#]), :protocol-impl nil, :arglists-meta (), :column 10, :line 21, :end-line 21, :max-fixed-arity 2, :fn-var true, :arglists nil}, filesize {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/clojure/contrib/humanize.cljc", :line 160, :column 7, :end-line 160, :end-column 15, :arglists (quote ([bytes & {:keys [binary format], :or {binary false, format "%.1f"}}])), :doc "Format a number of bytes as a human readable filesize (eg. 10 kB). By\n   default, decimal suffixes (kB, MB) are used.  Passing :binary true will use\n   binary suffixes (KiB, MiB) instead.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(bytes {:keys [binary format], :or {binary false, format "%.1f"}})], :arglists ([bytes & {:keys [binary format], :or {binary false, format "%.1f"}}]), :arglists-meta (nil)}}, :name clojure.contrib.humanize/filesize, :variadic true, :file "resources/public/js/out/clojure/contrib/humanize.cljc", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(bytes {:keys [binary format], :or {binary false, format "%.1f"}})], :arglists ([bytes & {:keys [binary format], :or {binary false, format "%.1f"}}]), :arglists-meta (nil)}, :method-params [(bytes {:keys [binary format], :or {binary false, format "%.1f"}})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 160, :end-line 160, :max-fixed-arity 1, :fn-var true, :arglists ([bytes & {:keys [binary format], :or {binary false, format "%.1f"}}]), :doc "Format a number of bytes as a human readable filesize (eg. 10 kB). By\n   default, decimal suffixes (kB, MB) are used.  Passing :binary true will use\n   binary suffixes (KiB, MiB) instead."}}, :cljs.spec/registry-ref [], :require-macros {clojure.contrib.macros clojure.contrib.macros}, :cljs.analyzer/constants {:seen #{:number-format :binary :EB :PiB :suffix :format :GB :ZB :now-dt :TB :else :TiB :MiB :truncate-noun :B :MB :maximum-display :KB :list-format :prefix :YB :EiB :PB :ZiB :GiB :KiB :YiB :short-text}, :order [:format :else :binary :B :KB :MB :GB :TB :PB :EB :ZB :YB :KiB :MiB :GiB :TiB :PiB :EiB :ZiB :YiB :maximum-display :truncate-noun :now-dt :suffix :prefix :number-format :list-format :short-text]}, :doc nil}