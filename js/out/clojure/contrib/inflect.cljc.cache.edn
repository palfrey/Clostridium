{:rename-macros {}, :renames {}, :use-macros {ends-with? clojure.string}, :excludes #{}, :name clojure.contrib.inflect, :imports nil, :requires {clojure.string clojure.string}, :cljs.spec/speced-vars [], :uses {ends-with? clojure.string}, :defs {in? {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/clojure/contrib/inflect.cljc", :line 5, :column 7, :end-line 5, :end-column 10, :arglists (quote ([x coll]))}, :name clojure.contrib.inflect/in?, :variadic false, :file "resources/public/js/out/clojure/contrib/inflect.cljc", :end-column 10, :method-params ([x coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 5, :end-line 5, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x coll]))}, pluralize-noun-rules {:name clojure.contrib.inflect/pluralize-noun-rules, :file "resources/public/js/out/clojure/contrib/inflect.cljc", :line 10, :column 1, :end-line 10, :end-column 36, :private true, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/clojure/contrib/inflect.cljc", :line 10, :column 16, :end-line 10, :end-column 36, :private true}, :tag any}, pluralize-noun-exceptions {:name clojure.contrib.inflect/pluralize-noun-exceptions, :file "resources/public/js/out/clojure/contrib/inflect.cljc", :line 11, :column 1, :end-line 11, :end-column 41, :private true, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/clojure/contrib/inflect.cljc", :line 11, :column 16, :end-line 11, :end-column 41, :private true}, :tag any}, pluralize-noun {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/clojure/contrib/inflect.cljc", :line 13, :column 7, :end-line 13, :end-column 21, :arglists (quote ([count noun]))}, :name clojure.contrib.inflect/pluralize-noun, :variadic false, :file "resources/public/js/out/clojure/contrib/inflect.cljc", :end-column 21, :method-params ([count noun]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 2, :fn-var true, :arglists (quote ([count noun]))}, add-pluralize-noun-rule {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/clojure/contrib/inflect.cljc", :line 25, :column 7, :end-line 25, :end-column 30, :arglists (quote ([rule-description cond? result-fn])), :doc "Adds a rule for pluralizing. The singular form of the noun is passed to the cond?\n  predicate and if that return a truthy value, the singular form is passed\n  to the result-fn to generate the plural form.\n\n  The rule description is for documentation only, it is ignored and may be nil."}, :name clojure.contrib.inflect/add-pluralize-noun-rule, :variadic false, :file "resources/public/js/out/clojure/contrib/inflect.cljc", :end-column 30, :method-params ([rule-description cond? result-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 3, :fn-var true, :arglists (quote ([rule-description cond? result-fn])), :doc "Adds a rule for pluralizing. The singular form of the noun is passed to the cond?\n  predicate and if that return a truthy value, the singular form is passed\n  to the result-fn to generate the plural form.\n\n  The rule description is for documentation only, it is ignored and may be nil."}, add-pluralize-noun-exceptions {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/resources/public/js/out/clojure/contrib/inflect.cljc", :line 36, :column 7, :end-line 36, :end-column 36, :arglists (quote ([execption-description exceptions])), :doc "Adds some number of exception cases.\n\n   exceptions is a map from singular form to plural form.\n\n   The exception description is for documentation only, it is ignored and may be nil."}, :name clojure.contrib.inflect/add-pluralize-noun-exceptions, :variadic false, :file "resources/public/js/out/clojure/contrib/inflect.cljc", :end-column 36, :method-params ([execption-description exceptions]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 36, :end-line 36, :max-fixed-arity 2, :fn-var true, :arglists (quote ([execption-description exceptions])), :doc "Adds some number of exception cases.\n\n   exceptions is a map from singular form to plural form.\n\n   The exception description is for documentation only, it is ignored and may be nil."}}, :cljs.spec/registry-ref [], :require-macros nil, :cljs.analyzer/constants {:seen #{:pre}, :order [:pre]}, :doc "Functions and rules for pluralizing nouns."}