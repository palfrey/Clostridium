{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name clostridium.common, :imports nil, :requires {r reagent.core, reagent.core reagent.core, string clojure.string, clojure.string clojure.string}, :cljs.spec/speced-vars [], :uses nil, :defs {app-state {:name clostridium.common/app-state, :file "src/clostridium/common.cljs", :line 6, :column 1, :end-line 6, :end-column 19, :meta {:file "/Users/palfrey/src/clostridium/src/clostridium/common.cljs", :line 6, :column 10, :end-line 6, :end-column 19}, :tag any}, count-return {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/src/clostridium/common.cljs", :line 13, :column 7, :end-line 13, :end-column 19, :arglists (quote ([string]))}, :name clostridium.common/count-return, :variadic false, :file "src/clostridium/common.cljs", :end-column 19, :method-params ([string]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 1, :fn-var true, :arglists (quote ([string]))}, print-js {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/src/clostridium/common.cljs", :line 20, :column 7, :end-line 20, :end-column 15, :arglists (quote ([msg]))}, :name clostridium.common/print-js, :variadic false, :file "src/clostridium/common.cljs", :end-column 15, :method-params ([msg]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 1, :fn-var true, :arglists (quote ([msg]))}}, :cljs.spec/registry-ref [], :require-macros {r reagent.core, reagent.core reagent.core}, :cljs.analyzer/constants {:seen #{:firstcolumn :else :ms-per-step :auto-run :example :console}, :order [:console :auto-run :firstcolumn :example :ms-per-step :else]}, :doc nil}