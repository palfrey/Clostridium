{:rename-macros {}, :renames {}, :externs {Object {}, throw {}, Error {}, Date {}}, :use-macros {split clojure.string}, :excludes #{}, :name clostridium.befunge, :imports nil, :requires {clojure.string clojure.string, dc decimal.core, decimal.core decimal.core}, :cljs.spec/speced-vars [], :uses {split clojure.string}, :defs {greatestPoint {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/src/clostridium/befunge.cljc", :line 116, :column 7, :end-line 116, :end-column 20, :arglists (quote ([b]))}, :name clostridium.befunge/greatestPoint, :variadic false, :file "/Users/palfrey/src/clostridium/src/clostridium/befunge.cljc", :end-column 20, :method-params ([b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 116, :end-line 116, :max-fixed-arity 1, :fn-var true, :arglists (quote ([b]))}, peekMany {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/src/clostridium/befunge.cljc", :line 231, :column 7, :end-line 231, :end-column 15, :arglists (quote ([st ct] [st ct items])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([st ct] [st ct items]), :arglists ([st ct] [st ct items]), :arglists-meta (nil nil)}}, :name clostridium.befunge/peekMany, :variadic false, :file "/Users/palfrey/src/clostridium/src/clostridium/befunge.cljc", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([st ct] [st ct items]), :arglists ([st ct] [st ct items]), :arglists-meta (nil nil)}, :method-params ([st ct] [st ct items]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 231, :end-line 231, :max-fixed-arity 3, :fn-var true, :arglists ([st ct] [st ct items])}, clipChar {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/src/clostridium/befunge.cljc", :line 203, :column 7, :end-line 203, :end-column 15, :arglists (quote ([i]))}, :name clostridium.befunge/clipChar, :variadic false, :file "/Users/palfrey/src/clostridium/src/clostridium/befunge.cljc", :end-column 15, :method-params ([i]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 203, :end-line 203, :max-fixed-arity 1, :fn-var true, :arglists (quote ([i]))}, step {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/src/clostridium/befunge.cljc", :line 118, :column 8, :end-line 118, :end-column 12, :private true, :arglists (quote ([pc dir] [pc dir howMany])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([pc dir] [pc dir howMany]), :arglists ([pc dir] [pc dir howMany]), :arglists-meta (nil nil)}}, :private true, :name clostridium.befunge/step, :variadic false, :file "/Users/palfrey/src/clostridium/src/clostridium/befunge.cljc", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([pc dir] [pc dir howMany]), :arglists ([pc dir] [pc dir howMany]), :arglists-meta (nil nil)}, :method-params ([pc dir] [pc dir howMany]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 118, :end-line 118, :max-fixed-arity 3, :fn-var true, :arglists ([pc dir] [pc dir howMany])}, setNewSoss {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/src/clostridium/befunge.cljc", :line 12, :column 7, :end-line 12, :end-column 17, :arglists (quote ([b s]))}, :name clostridium.befunge/setNewSoss, :variadic false, :file "/Users/palfrey/src/clostridium/src/clostridium/befunge.cljc", :end-column 17, :method-params ([b s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 2, :fn-var true, :arglists (quote ([b s]))}, removeManyFromStack {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/src/clostridium/befunge.cljc", :line 33, :column 7, :end-line 33, :end-column 26, :arglists (quote ([nb many]))}, :name clostridium.befunge/removeManyFromStack, :variadic false, :file "/Users/palfrey/src/clostridium/src/clostridium/befunge.cljc", :end-column 26, :method-params ([nb many]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 2, :fn-var true, :arglists (quote ([nb many]))}, toss {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/src/clostridium/befunge.cljc", :line 5, :column 7, :end-line 5, :end-column 11, :arglists (quote ([b]))}, :name clostridium.befunge/toss, :variadic false, :file "/Users/palfrey/src/clostridium/src/clostridium/befunge.cljc", :end-column 11, :method-params ([b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 5, :end-line 5, :max-fixed-arity 1, :fn-var true, :arglists (quote ([b]))}, reflect {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/src/clostridium/befunge.cljc", :line 42, :column 7, :end-line 42, :end-column 14, :arglists (quote ([b]))}, :name clostridium.befunge/reflect, :variadic false, :file "/Users/palfrey/src/clostridium/src/clostridium/befunge.cljc", :end-column 14, :method-params ([b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 42, :end-line 42, :max-fixed-arity 1, :fn-var true, :arglists (quote ([b]))}, updatePC {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/src/clostridium/befunge.cljc", :line 179, :column 7, :end-line 179, :end-column 15, :arglists (quote ([b] [b noJump] [b noJump dir])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([b] [b noJump] [b noJump dir]), :arglists ([b] [b noJump] [b noJump dir]), :arglists-meta (nil nil nil)}}, :name clostridium.befunge/updatePC, :variadic false, :file "/Users/palfrey/src/clostridium/src/clostridium/befunge.cljc", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([b] [b noJump] [b noJump dir]), :arglists ([b] [b noJump] [b noJump dir]), :arglists-meta (nil nil nil)}, :method-params ([b] [b noJump] [b noJump dir]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 179, :end-line 179, :max-fixed-arity 3, :fn-var true, :arglists ([b] [b noJump] [b noJump dir])}, buildGridfromString {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/src/clostridium/befunge.cljc", :line 474, :column 7, :end-line 474, :end-column 26, :arglists (quote ([data]))}, :name clostridium.befunge/buildGridfromString, :variadic false, :file "/Users/palfrey/src/clostridium/src/clostridium/befunge.cljc", :end-column 26, :method-params ([data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 474, :end-line 474, :max-fixed-arity 1, :fn-var true, :arglists (quote ([data]))}, jumpPC {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/src/clostridium/befunge.cljc", :line 122, :column 7, :end-line 122, :end-column 13, :arglists (quote ([grid pc dir]))}, :name clostridium.befunge/jumpPC, :variadic false, :file "/Users/palfrey/src/clostridium/src/clostridium/befunge.cljc", :end-column 13, :method-params ([grid pc dir]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 122, :end-line 122, :max-fixed-arity 3, :fn-var true, :arglists (quote ([grid pc dir]))}, popMany {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/src/clostridium/befunge.cljc", :line 224, :column 7, :end-line 224, :end-column 14, :arglists (quote ([st ct]))}, :name clostridium.befunge/popMany, :variadic false, :file "/Users/palfrey/src/clostridium/src/clostridium/befunge.cljc", :end-column 14, :method-params ([st ct]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 224, :end-line 224, :max-fixed-arity 2, :fn-var true, :arglists (quote ([st ct]))}, maxValue {:name clostridium.befunge/maxValue, :file "/Users/palfrey/src/clostridium/src/clostridium/befunge.cljc", :line 79, :column 1, :end-line 79, :end-column 14, :meta {:file "/Users/palfrey/src/clostridium/src/clostridium/befunge.cljc", :line 79, :column 6, :end-line 79, :end-column 14}, :tag any}, throw-msg {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/src/clostridium/befunge.cljc", :line 92, :column 7, :end-line 92, :end-column 16, :arglists (quote ([msg]))}, :name clostridium.befunge/throw-msg, :variadic false, :file "/Users/palfrey/src/clostridium/src/clostridium/befunge.cljc", :end-column 16, :method-params ([msg]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 92, :end-line 92, :max-fixed-arity 1, :fn-var true, :arglists (quote ([msg]))}, makeInitial {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/src/clostridium/befunge.cljc", :line 479, :column 7, :end-line 479, :end-column 18, :arglists (quote ([data print-fn]))}, :name clostridium.befunge/makeInitial, :variadic false, :file "/Users/palfrey/src/clostridium/src/clostridium/befunge.cljc", :end-column 18, :method-params ([data print-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 479, :end-line 479, :max-fixed-arity 2, :fn-var true, :arglists (quote ([data print-fn]))}, addToStack {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/src/clostridium/befunge.cljc", :line 22, :column 7, :end-line 22, :end-column 17, :arglists (quote ([b item]))}, :name clostridium.befunge/addToStack, :variadic false, :file "/Users/palfrey/src/clostridium/src/clostridium/befunge.cljc", :end-column 17, :method-params ([b item]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 2, :fn-var true, :arglists (quote ([b item]))}, setNewToss {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/src/clostridium/befunge.cljc", :line 9, :column 7, :end-line 9, :end-column 17, :arglists (quote ([b t]))}, :name clostridium.befunge/setNewToss, :variadic false, :file "/Users/palfrey/src/clostridium/src/clostridium/befunge.cljc", :end-column 17, :method-params ([b t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 9, :end-line 9, :max-fixed-arity 2, :fn-var true, :arglists (quote ([b t]))}, setVal {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/src/clostridium/befunge.cljc", :line 193, :column 7, :end-line 193, :end-column 13, :arglists (quote ([grid coord value]))}, :name clostridium.befunge/setVal, :variadic false, :file "/Users/palfrey/src/clostridium/src/clostridium/befunge.cljc", :end-column 13, :method-params ([grid coord value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 193, :end-line 193, :max-fixed-arity 3, :fn-var true, :arglists (quote ([grid coord value]))}, newTossAndSoss {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/src/clostridium/befunge.cljc", :line 19, :column 7, :end-line 19, :end-column 21, :arglists (quote ([b t s]))}, :name clostridium.befunge/newTossAndSoss, :variadic false, :file "/Users/palfrey/src/clostridium/src/clostridium/befunge.cljc", :end-column 21, :method-params ([b t s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 3, :fn-var true, :arglists (quote ([b t s]))}, doAndPrint {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/src/clostridium/befunge.cljc", :line 494, :column 7, :end-line 494, :end-column 17, :arglists (quote ([b]))}, :name clostridium.befunge/doAndPrint, :variadic false, :file "/Users/palfrey/src/clostridium/src/clostridium/befunge.cljc", :end-column 17, :method-params ([b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 494, :end-line 494, :max-fixed-arity 1, :fn-var true, :arglists (quote ([b]))}, clipValue {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/src/clostridium/befunge.cljc", :line 87, :column 7, :end-line 87, :end-column 16, :arglists (quote ([val]))}, :name clostridium.befunge/clipValue, :variadic false, :file "/Users/palfrey/src/clostridium/src/clostridium/befunge.cljc", :end-column 16, :method-params ([val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 87, :end-line 87, :max-fixed-arity 1, :fn-var true, :arglists (quote ([val]))}, transfer {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/src/clostridium/befunge.cljc", :line 243, :column 7, :end-line 243, :end-column 15, :arglists (quote ([src dest ct rev]))}, :name clostridium.befunge/transfer, :variadic false, :file "/Users/palfrey/src/clostridium/src/clostridium/befunge.cljc", :end-column 15, :method-params ([src dest ct rev]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 243, :end-line 243, :max-fixed-arity 4, :fn-var true, :arglists (quote ([src dest ct rev]))}, runBefunge {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/src/clostridium/befunge.cljc", :line 504, :column 7, :end-line 504, :end-column 17, :arglists (quote ([data]))}, :name clostridium.befunge/runBefunge, :variadic false, :file "/Users/palfrey/src/clostridium/src/clostridium/befunge.cljc", :end-column 17, :method-params ([data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 504, :end-line 504, :max-fixed-arity 1, :fn-var true, :arglists (quote ([data]))}, runInst {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/src/clostridium/befunge.cljc", :line 210, :column 7, :end-line 210, :end-column 14, :arglists (quote ([b inst]))}, :name clostridium.befunge/runInst, :variadic false, :file "/Users/palfrey/src/clostridium/src/clostridium/befunge.cljc", :end-column 14, :method-params ([b inst]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 210, :end-line 210, :max-fixed-arity 2, :fn-var true, :arglists (quote ([b inst]))}, mathop {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/src/clostridium/befunge.cljc", :line 67, :column 7, :end-line 67, :end-column 13, :arglists (quote ([op]))}, :name clostridium.befunge/mathop, :variadic false, :file "/Users/palfrey/src/clostridium/src/clostridium/befunge.cljc", :end-column 13, :method-params ([op]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 67, :end-line 67, :max-fixed-arity 1, :fn-var true, :arglists (quote ([op]))}, leastPoint {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/src/clostridium/befunge.cljc", :line 115, :column 7, :end-line 115, :end-column 17, :arglists (quote ([b]))}, :name clostridium.befunge/leastPoint, :variadic false, :file "/Users/palfrey/src/clostridium/src/clostridium/befunge.cljc", :end-column 17, :method-params ([b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 115, :end-line 115, :max-fixed-arity 1, :fn-var true, :arglists (quote ([b]))}, soss {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/src/clostridium/befunge.cljc", :line 6, :column 7, :end-line 6, :end-column 11, :arglists (quote ([b]))}, :name clostridium.befunge/soss, :variadic false, :file "/Users/palfrey/src/clostridium/src/clostridium/befunge.cljc", :end-column 11, :method-params ([b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 6, :end-line 6, :max-fixed-arity 1, :fn-var true, :arglists (quote ([b]))}, upperCharInsts {:name clostridium.befunge/upperCharInsts, :file "/Users/palfrey/src/clostridium/src/clostridium/befunge.cljc", :line 60, :column 1, :end-line 60, :end-column 20, :meta {:file "/Users/palfrey/src/clostridium/src/clostridium/befunge.cljc", :line 60, :column 6, :end-line 60, :end-column 20}, :tag cljs.core/IMap}, ross {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/src/clostridium/befunge.cljc", :line 7, :column 7, :end-line 7, :end-column 11, :arglists (quote ([b]))}, :name clostridium.befunge/ross, :variadic false, :file "/Users/palfrey/src/clostridium/src/clostridium/befunge.cljc", :end-column 11, :method-params ([b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 1, :fn-var true, :arglists (quote ([b]))}, rotateCCW {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/src/clostridium/befunge.cljc", :line 200, :column 7, :end-line 200, :end-column 16, :arglists (quote ([b]))}, :name clostridium.befunge/rotateCCW, :variadic false, :file "/Users/palfrey/src/clostridium/src/clostridium/befunge.cljc", :end-column 16, :method-params ([b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 200, :end-line 200, :max-fixed-arity 1, :fn-var true, :arglists (quote ([b]))}, charcode {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/src/clostridium/befunge.cljc", :line 45, :column 7, :end-line 45, :end-column 15, :arglists (quote ([c]))}, :name clostridium.befunge/charcode, :variadic false, :file "/Users/palfrey/src/clostridium/src/clostridium/befunge.cljc", :end-column 15, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c]))}, pushMany {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/src/clostridium/befunge.cljc", :line 240, :column 7, :end-line 240, :end-column 15, :arglists (quote ([existing more]))}, :name clostridium.befunge/pushMany, :variadic false, :file "/Users/palfrey/src/clostridium/src/clostridium/befunge.cljc", :end-column 15, :method-params ([existing more]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 240, :end-line 240, :max-fixed-arity 2, :fn-var true, :arglists (quote ([existing more]))}, doInst {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/src/clostridium/befunge.cljc", :line 490, :column 7, :end-line 490, :end-column 13, :arglists (quote ([b]))}, :name clostridium.befunge/doInst, :variadic false, :file "/Users/palfrey/src/clostridium/src/clostridium/befunge.cljc", :end-column 13, :method-params ([b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 490, :end-line 490, :max-fixed-arity 1, :fn-var true, :arglists (quote ([b]))}, negMaxValue {:name clostridium.befunge/negMaxValue, :file "/Users/palfrey/src/clostridium/src/clostridium/befunge.cljc", :line 80, :column 1, :end-line 80, :end-column 17, :meta {:file "/Users/palfrey/src/clostridium/src/clostridium/befunge.cljc", :line 80, :column 6, :end-line 80, :end-column 17}, :tag number}, removeFromStack {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/src/clostridium/befunge.cljc", :line 25, :column 7, :end-line 25, :end-column 22, :arglists (quote ([b]))}, :name clostridium.befunge/removeFromStack, :variadic false, :file "/Users/palfrey/src/clostridium/src/clostridium/befunge.cljc", :end-column 22, :method-params ([b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 1, :fn-var true, :arglists (quote ([b]))}, updatePCSkipSpace {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/src/clostridium/befunge.cljc", :line 162, :column 7, :end-line 162, :end-column 24, :arglists (quote ([b noJump dir]))}, :name clostridium.befunge/updatePCSkipSpace, :variadic false, :file "/Users/palfrey/src/clostridium/src/clostridium/befunge.cljc", :end-column 24, :method-params ([b noJump dir]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 162, :end-line 162, :max-fixed-arity 3, :fn-var true, :arglists (quote ([b noJump dir]))}, orderedPoint {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/src/clostridium/befunge.cljc", :line 107, :column 7, :end-line 107, :end-column 19, :arglists (quote ([b order]))}, :name clostridium.befunge/orderedPoint, :variadic false, :file "/Users/palfrey/src/clostridium/src/clostridium/befunge.cljc", :end-column 19, :method-params ([b order]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 107, :end-line 107, :max-fixed-arity 2, :fn-var true, :arglists (quote ([b order]))}, rotateCW {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/src/clostridium/befunge.cljc", :line 201, :column 7, :end-line 201, :end-column 15, :arglists (quote ([b]))}, :name clostridium.befunge/rotateCW, :variadic false, :file "/Users/palfrey/src/clostridium/src/clostridium/befunge.cljc", :end-column 15, :method-params ([b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 201, :end-line 201, :max-fixed-arity 1, :fn-var true, :arglists (quote ([b]))}, current {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/src/clostridium/befunge.cljc", :line 96, :column 7, :end-line 96, :end-column 14, :arglists (quote ([b] [grid pc])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([b] [grid pc]), :arglists ([b] [grid pc]), :arglists-meta (nil nil)}}, :name clostridium.befunge/current, :variadic false, :file "/Users/palfrey/src/clostridium/src/clostridium/befunge.cljc", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([b] [grid pc]), :arglists ([b] [grid pc]), :arglists-meta (nil nil)}, :method-params ([b] [grid pc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 96, :end-line 96, :max-fixed-arity 2, :fn-var true, :arglists ([b] [grid pc])}, initialInstructions {:name clostridium.befunge/initialInstructions, :file "/Users/palfrey/src/clostridium/src/clostridium/befunge.cljc", :line 259, :column 1, :end-line 259, :end-column 25, :meta {:file "/Users/palfrey/src/clostridium/src/clostridium/befunge.cljc", :line 259, :column 6, :end-line 259, :end-column 25}, :tag any}, numberInsts {:name clostridium.befunge/numberInsts, :file "/Users/palfrey/src/clostridium/src/clostridium/befunge.cljc", :line 49, :column 1, :end-line 49, :end-column 17, :meta {:file "/Users/palfrey/src/clostridium/src/clostridium/befunge.cljc", :line 49, :column 6, :end-line 49, :end-column 17}, :tag cljs.core/IMap}, print-fn {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/src/clostridium/befunge.cljc", :line 500, :column 7, :end-line 500, :end-column 15, :arglists (quote ([msg]))}, :name clostridium.befunge/print-fn, :variadic false, :file "/Users/palfrey/src/clostridium/src/clostridium/befunge.cljc", :end-column 15, :method-params ([msg]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 500, :end-line 500, :max-fixed-arity 1, :fn-var true, :arglists (quote ([msg]))}, makeFingerprint {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/src/clostridium/befunge.cljc", :line 252, :column 7, :end-line 252, :end-column 22, :arglists (quote ([nb]))}, :name clostridium.befunge/makeFingerprint, :variadic false, :file "/Users/palfrey/src/clostridium/src/clostridium/befunge.cljc", :end-column 22, :method-params ([nb]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 252, :end-line 252, :max-fixed-arity 1, :fn-var true, :arglists (quote ([nb]))}}, :cljs.spec/registry-ref [], :require-macros nil, :cljs.analyzer/constants {:seen #{:date :dir :inst :else :default :grid :item :month :pc :seconds :running :year :stringMode :stack :b :hours :storageOffset :minutes :items :fingerprint :printfn}, :order [:stack :b :item :items :dir :else :grid :pc :stringMode :default :inst :fingerprint :running :printfn :storageOffset :year :month :date :hours :minutes :seconds]}, :doc nil}