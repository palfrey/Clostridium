{:rename-macros {}, :renames {}, :use-macros {testing cljs.test, is cljs.test, deftest cljs.test}, :excludes #{}, :name clostridium.befunge_test_core, :imports nil, :requires {cljs.test cljs.test, clostridium.befunge clostridium.befunge, cljs.pprint cljs.pprint, clojure.pprint cljs.pprint}, :uses {pprint cljs.pprint, runBefunge clostridium.befunge}, :defs {without-extension {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/test/cljs/clostridium/befunge_test_core.cljc", :line 7, :column 7, :end-line 7, :end-column 24, :arglists (quote ([path]))}, :name clostridium.befunge_test_core/without-extension, :variadic false, :file "test/cljs/clostridium/befunge_test_core.cljc", :end-column 24, :method-params ([path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 1, :fn-var true, :arglists (quote ([path]))}, extension {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/test/cljs/clostridium/befunge_test_core.cljc", :line 10, :column 7, :end-line 10, :end-column 16, :arglists (quote ([path]))}, :name clostridium.befunge_test_core/extension, :variadic false, :file "test/cljs/clostridium/befunge_test_core.cljc", :end-column 16, :method-params ([path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 10, :max-fixed-arity 1, :fn-var true, :arglists (quote ([path]))}, runPyfungeTests {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/test/cljs/clostridium/befunge_test_core.cljc", :line 13, :column 11, :end-line 13, :end-column 26, :macro true, :arglists (quote ([]))}, :name clostridium.befunge_test_core/runPyfungeTests, :variadic false, :file "test/cljs/clostridium/befunge_test_core.cljc", :end-column 26, :method-params ([&form &env]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :macro true, :end-line 13, :max-fixed-arity 2, :fn-var true, :arglists (quote ([]))}}, :require-macros {cljs.test cljs.test, cljs.pprint cljs.pprint, clojure.pprint cljs.pprint}, :cljs.analyzer/constants {:seen #{clostridium.befunge_test_core/is expected__9808__auto__ clostridium.befunge_test_core/deftest cljs.core/= cljs.core/count trimExpected__9809__auto__ clostridium.befunge/runBefunge do result__9810__auto__ cljs.core/- cljs.core/let cljs.core/with-out-str cljs.core/subs}, :order [do clostridium.befunge_test_core/deftest cljs.core/let expected__9808__auto__ trimExpected__9809__auto__ cljs.core/subs cljs.core/- cljs.core/count result__9810__auto__ cljs.core/with-out-str clostridium.befunge/runBefunge clostridium.befunge_test_core/is cljs.core/=]}, :doc nil}