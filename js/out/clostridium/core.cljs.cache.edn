{:rename-macros {}, :renames {}, :externs {parseInt {}, window {getComputedStyle {}, addEventListener {}}, document {getElementById {}}, Object {width {}}, Math {floor {}}, goog {DEBUG {}}}, :use-macros {go cljs.core.async.macros}, :excludes #{}, :name clostridium.core, :imports nil, :requires {befunge clostridium.befunge, gstring goog.string, clostridium.befunge clostridium.befunge, goog.string goog.string, reagent.core reagent.core, r reagent.core, clostridium.common clostridium.common, clostridium.upload clostridium.upload, cljs.core.async cljs.core.async, human clojure.contrib.humanize, goog.string.format goog.string.format, string clojure.string, clojure.contrib.humanize clojure.contrib.humanize, clojure.string clojure.string}, :cljs.spec/speced-vars [], :uses {timeout cljs.core.async, <! cljs.core.async, load-program clostridium.upload, print-js clostridium.common, upload-btn clostridium.upload, app-state clostridium.common}, :defs {console {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/src/clostridium/core.cljs", :line 139, :column 7, :end-line 139, :end-column 14, :arglists (quote ([]))}, :name clostridium.core/console, :variadic false, :file "/Users/palfrey/src/clostridium/src/clostridium/core.cljs", :end-column 14, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 139, :end-line 139, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, on-window-resize {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/src/clostridium/core.cljs", :line 30, :column 7, :end-line 30, :end-column 23, :arglists (quote ([evt]))}, :name clostridium.core/on-window-resize, :variadic false, :file "/Users/palfrey/src/clostridium/src/clostridium/core.cljs", :end-column 23, :method-params ([evt]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 30, :end-line 30, :max-fixed-arity 1, :fn-var true, :arglists (quote ([evt]))}, main {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/src/clostridium/core.cljs", :line 165, :column 16, :end-line 165, :end-column 20, :export true, :arglists (quote ([]))}, :name clostridium.core/main, :variadic false, :file "/Users/palfrey/src/clostridium/src/clostridium/core.cljs", :end-column 20, :method-params ([]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 165, :end-line 165, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, run-step {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/src/clostridium/core.cljs", :line 66, :column 7, :end-line 66, :end-column 15, :arglists (quote ([]))}, :name clostridium.core/run-step, :variadic false, :file "/Users/palfrey/src/clostridium/src/clostridium/core.cljs", :end-column 15, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 66, :end-line 66, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, grid {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/src/clostridium/core.cljs", :line 37, :column 7, :end-line 37, :end-column 11, :arglists (quote ([]))}, :name clostridium.core/grid, :variadic false, :file "/Users/palfrey/src/clostridium/src/clostridium/core.cljs", :end-column 11, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, dev-setup {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/src/clostridium/core.cljs", :line 155, :column 7, :end-line 155, :end-column 16, :arglists (quote ([]))}, :name clostridium.core/dev-setup, :variadic false, :file "/Users/palfrey/src/clostridium/src/clostridium/core.cljs", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 155, :end-line 155, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, load-example {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/src/clostridium/core.cljs", :line 78, :column 7, :end-line 78, :end-column 19, :arglists (quote ([]))}, :name clostridium.core/load-example, :variadic false, :file "/Users/palfrey/src/clostridium/src/clostridium/core.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 78, :end-line 78, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, examples {:name clostridium.core/examples, :file "/Users/palfrey/src/clostridium/src/clostridium/core.cljs", :line 13, :column 1, :end-line 13, :end-column 14, :meta {:file "/Users/palfrey/src/clostridium/src/clostridium/core.cljs", :line 13, :column 6, :end-line 13, :end-column 14}, :tag cljs.core/IMap}, info {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/src/clostridium/core.cljs", :line 81, :column 7, :end-line 81, :end-column 11, :arglists (quote ([]))}, :name clostridium.core/info, :variadic false, :file "/Users/palfrey/src/clostridium/src/clostridium/core.cljs", :end-column 11, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 81, :end-line 81, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, reload {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/src/clostridium/core.cljs", :line 159, :column 7, :end-line 159, :end-column 13, :arglists (quote ([]))}, :name clostridium.core/reload, :variadic false, :file "/Users/palfrey/src/clostridium/src/clostridium/core.cljs", :end-column 13, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 159, :end-line 159, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, display {:protocol-inline nil, :meta {:file "/Users/palfrey/src/clostridium/src/clostridium/core.cljs", :line 144, :column 7, :end-line 144, :end-column 14, :arglists (quote ([]))}, :name clostridium.core/display, :variadic false, :file "/Users/palfrey/src/clostridium/src/clostridium/core.cljs", :end-column 14, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 144, :end-line 144, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :cljs.spec/registry-ref [], :require-macros {cljs.core.async.macros cljs.core.async.macros, r reagent.core, reagent.core reagent.core}, :cljs.analyzer/constants {:seen #{:firstcolumn :tbody :table :ul :dir :pre :key :else :font-size :button :grid :td :li :value :tr :width :recur :pc :ms-per-step :on-click :running :style :div :option :id :class :auto-run :file-name :stringMode :stack :b :br :example :console :h1 :on-change :h3 :p :href :max-columns :a :height :select :clear}, :order [:firstcolumn :max-columns :b :grid :pc :div :class :key :br :style :clear :example :dir :stack :running :auto-run :button :on-click :width :height :h3 :p :select :value :on-change :ms-per-step :option :font-size :file-name :table :tbody :tr :td :stringMode :ul :li :pre :console :recur :else :id :h1 :a :href]}, :doc nil}